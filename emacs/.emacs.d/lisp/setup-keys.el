;;; setup-keys.el --- Key Bindings module -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

;; Author: Nicolas CHAPON
;; Keywords: Emacs configuration
;; Homepage:

;;; Commentary:
;; Emacs config file.
;; This file was automatically generated by `org-babel-tangle'.
;; Do not change this file.  Main config is located in Readme.org at `user-emacs-directory'

;;; Code:

;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "C-l") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "M-o") nil)
(global-set-key (kbd "M-SPC") nil)


(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)

;; Prefer backward-kill-word over Backspace
(global-set-key (kbd "C-w") #'backward-kill-word)
(global-set-key (kbd "C-x C-k") #'kill-region)

(global-set-key (kbd "C-x C-r") #'recentf-open-files)

;; Move up/down paragraph
(global-set-key (kbd "M-n") #'forward-paragraph)
(global-set-key (kbd "M-p") #'backward-paragraph)
(global-set-key (kbd "C-x c") #'compile)


;; Functions
(bind-keys
 ("<f5>" . revert-buffer)
 ("C-<f5>" . magit-log-buffer-file)
 ("<f9>" . treemacs)
 ("<f11>" . nc/maximize-or-split-window-vertically)
 ("C-<f11>" . nc/split-window-horizontally)
 ("<f12>" . org-agenda)
 ("C-<f12>" . org-agenda))

;; Tools alt-[0-9]
(bind-keys
 ("M-0" . nc/maximize-or-split-window-vertically))

(use-package hydra
  :ensure t
  :custom
  (hydra-default-hint nil))

(use-package major-mode-hydra
  :ensure t)

;; Pretty Hydra
(use-package pretty-hydra
  :ensure t)

(pretty-hydra-define nc-hydra-insert (:foreign-keys warn :title "Insert" :quit-key "q" :exit t)
  ("Insert"
   (("d" nc/insert-datestamp-inactive "Date InActive")
    ("D" nc/insert-datestamp "Date Active")
    ("p" nc/generate-password "Password")
    ("u" nc/uuid "UUID"))

   "Snippet"
   (("y" consult-yasnippet "Yasnippet")
    ("Y" yankpad-insert "Yankpad"))))

(pretty-hydra-define nc-hydra-goto (:foreign-keys warn :title "Goto" :quit-key "q" :exit t)
  ("Configuration"
   ((";" nc/goto-emacs-config "Emacs Config"))

    "Personal Files"
    (("i" nc/goto-inbox "Inbox")
     ("p" nc/goto-my-credentials "Passwords"))

   "Personal Dirs"
   (("A" nc/goto-archives-dir "Archives")
    ("N" nc/goto-notes-dir "Notes")
    ("P" nc/goto-projects-dir "Projects")
    ("T" nc/goto-templates-dir "Templates"))))

(pretty-hydra-define nc-hydra-toggle
  (:color amaranth :quit-key "q" :title "Toggles")
  ("Basic"
   (("n" linum-mode "line number" :toggle t)
    ("w" whitespace-mode "whitespace" :toggle t)
    ;;("W" whitespace-cleanup-mode "whitespace cleanup" :toggle t)
    ("r" rainbow-mode "rainbow" :toggle t))
   "Highlight"
   (("l" hl-line-mode "line" :toggle t))
   "Coding"
   (("p" smartparens-mode "smartparens" :toggle t)
    ("P" smartparens-strict-mode "smartparens strict" :toggle t)
    ("S" show-smartparens-mode "show smartparens" :toggle t)
    ("e" eldoc-mode "eldoc" :toggle t))
   "Emacs"
   (("D" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
    ("X" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit)))))

(pretty-hydra-define nc-hydra-windows
    (:color amaranth :quit-key "q" :title "Windows" :exit t)
    ("Move"
     (("v" nc/maximize-or-split-window-vertically "Maximize or Split Window V")
      ("h" nc/split-window-horizontally "Split Window H"))))

(major-mode-hydra-define org-mode nil
  ("GTD"
   (("s" nc/org-insert-daily-review "Start Daily Review")
    ("d" nc/insert-daily-heading "Insert Daily Heading"))
   "Actions"
   (("p" nc/plantuml-preview-current-block "Plantuml Preview Current Block")
    ("r" nc/org-refile-subtree-to-file "Refile subtree to file")
    ("A" nc/create-buffer-attachment-directory "Create attachment directory"))
   "Search"
   (("?" nc/search-notes "Search Notes"))))

(major-mode-hydra-define markdown-mode nil
  ("Actions"
   (("p" nc/plantuml-preview-current-block "Plantuml Preview"))))

(major-mode-hydra-define plantuml-mode nil
  ("Actions"
   (("p" nc/plantuml-preview-current-block "Plantuml Preview"))))

(major-mode-hydra-define python-mode nil
  ("Actions"
   (("f" nc/format-buffer-with-ruff "Format Buffer with Ruff")
    ("d" python-insert-docstring-with-google-style-at-point "Add docstring"))))

(use-package key-chord
  :init
  (key-chord-mode 1)
  (key-chord-define-global "FF" 'projectile-find-file)
  (key-chord-define-global "::" 'avy-goto-char-timer)
  (key-chord-define-global "GG" 'consult-ripgrep)  
  (key-chord-define-global "OO" 'consult-outline)
  (key-chord-define-global "DD" 'delete-region)
  (key-chord-define-global "??" 'nc/search-notes) 
  (key-chord-define-global "BB" 'beginning-of-buffer)
  (key-chord-define-global "JJ" 'crux-top-join-line)
  (key-chord-define-global "MM" 'nc/maximize-or-split-window-vertically)
  (key-chord-define-global "$$" 'end-of-buffer))

(use-package which-key
  :diminish
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-mode)
  (which-key-enable-god-mode-support))

(global-set-key (kbd "C-q") nil)

;; Eanble transinet menus
(use-package transient
    :commands (transient-define-prefix))

(defvar-keymap prefix-buffer-map-ctrl-l
  :doc "Prefix map for C-q for LSP"
  "j" #'consult-lsp-symbols
  "r" #'lsp-rename
  "o" #'lsp-organize-imports
  "X" #'lsp-treemacs-errors-list
  "H" #'lsp-treemacs-call-hierarchy
  "S" #'lsp-treemacs-symbols
  "R" #'lsp-treemacs-references)

(defvar-keymap prefix-buffer-map-ctrl-d
  :doc "Prefix map for C-q for dired / directories"
  "j" #'dired
  "s" #'denote-sort-dired
  ;; "d" prefix-buffer-map-ctrl-denote
  )

(transient-define-prefix nc/buffer-menu ()
  "Control buffer operations."
  ["Buffer Navigation"
   ("n" "Next buffer" next-buffer :transient t)
   ("p" "Previous buffer" previous-buffer :transient t)
   ("b" "Switch buffer" switch-to-buffer)
   ("o" "Switch other window" switch-to-buffer-other-window)
   ("5" "Switch other frame" switch-to-buffer-other-frame)
   ("B" "Bury buffer" bury-buffer :transient t)]
  ["Buffer Management"
   ("k" "Kill buffer" kill-buffer)
   ("s" "Save buffer" save-buffer :transient t)
   ("S" "Save all buffers" save-some-buffers)
   ("r" "Rename file & buffer" crux-rename-file-and-buffer)
   ("d" "Delete file & buffer" crux-delete-file-and-buffer)
   ("c" "Copy file" crux-copy-file-preserve-attributes)]
  ["Display & View"
   ("l" "List buffers" ibuffer)
   ("m" "Buffer menu" buffer-menu)
   ("v" "View mode" view-mode :transient t)
   ("=" "Compare with file" diff-buffer-with-file)
   ("C" "Clone indirect buffer" clone-indirect-buffer)]
  ["Git & History"
   ("R" "Revert buffer" revert-buffer)
   ("g" "Magit log file" magit-log-buffer-file)]
  ["Buffer Properties"
   ("w" "Toggle read-only" read-only-mode :transient t)
   ("a" "Toggle auto-save" auto-save-mode :transient t)
   ("A" "Toggle auto-fill" auto-fill-mode :transient t)
   ("f" "Set fill column" set-fill-column)
   ("F" "Show fill column" display-fill-column-indicator-mode :transient t)
   ("e" "Set encoding" set-buffer-file-coding-system)]
  ["Exit"
   ("q" "Quit" transient-quit-one)])

(defun kill-other-buffers ()
  "Kill all buffers except the current one."
  (interactive)
  (when (yes-or-no-p "Kill all other buffers? ")
    (mapc 'kill-buffer 
          (delq (current-buffer) 
                (cl-remove-if-not 'buffer-file-name (buffer-list))))
    (message "Killed other file buffers")))

(defvar-keymap prefix-buffer-map-ctrl-f
  :doc "Prefix map for C-q for files"
  "f" #'nc/consult-fd-my-projects
  "r" #'rename-visited-file)

(defvar-keymap prefix-buffer-map-ctrl-i
  :doc "Prefix map for C-q for Insert"
  "d" #'nc/insert-datestamp-inactive
  "D" #'nc/insert-datestamp
  "e" #'emoji-search
  "p" #'nc/generate-password
  "q" #'quoted-insert
  "t" #'tempel-insert
  "u" #'nc/uuid
  "y" #'consult-yasnippet
  "Y" #'yankpad-insert)

(transient-define-prefix nc/goto-menu ()
  "Go To: Quick Navigation"
  [["Directories"
    ("a" "Archives" nc/goto-archives-dir)
    ("n" "Notes" nc/goto-notes-dir)
    ("P" "Projects" nc/goto-projects-dir)
    ("t" "Templates" nc/goto-templates-dir)
    ]
   ["Files"
    (";" "Emacs Config" nc/goto-emacs-config)
    ("p" "Credentials" nc/goto-my-credentials)
    ]])

(transient-define-prefix nc/jump-menu ()
  "Jump menu with avy and consult..."
  ["Jump"
   ["Avy"
    (":" "Char" avy-goto-char-timer)
    ("w" "Word" avy-goto-word-1)
    ("l" "Line" avy-goto-line)
    ]
   ["Consult"
    ("h" "Org Agenda Heading" consult-org-agenda)
    ("i" "Outline/imenu" consult-imenu)
    ("m" "Mark ring" consult-mark)
    ("r" "Register" consult-register-load)
    ]
   ["Other"
    ("." "Project dir-locals.el" projectile-edit-dir-locals)
    ("g" "Goto line" goto-line)
    ("f" "Find file at point" ffap)
    ("F" "FFAP in buffer" ffap-menu)
    ("G" "Browse VC Remote" nc/vc-browse-remote)
    ("v" "Browse VC Remote File" nc/vc-browse-remote-current-line)
    ]])

(defvar-keymap prefix-buffer-map-ctrl-k
  :doc "Prefix map for C-q for killing"
  "w" #'kill-buffer-and-window
  "f" #'delete-frame
  )

(defvar-keymap prefix-buffer-map-ctrl-n
  :doc "Prefix map for C-q for notes"
  "s" #'org-search-view
  "t" #'org-todo-list
  "l" #'org-store-link
  )

(defvar-keymap prefix-buffer-map-ctrl-o
  :doc "Prefix map for C-q for open"
  "c" #'calc
  "e" #'crux-open-with
  "f" #'make-frame
  "g" #'nc/vc-browse-remote
  "l" #'nc/open-bookmark
  "t" #'nc/treemacs-toggle)


(defvar-keymap prefix-buffer-map-ctrl-s
  :doc "Prefix map for C-q for Search"
  "e" #'emoji-search
  "n" #'nc/search-notes
  "p" #'nc/consult-rg-my-projects
  "s" #'nc/consult-line-symbol-at-point)


(defvar-keymap prefix-buffer-map-ctrl-t
  :doc "Prefix map for C-q for toggle features."
  "D" #'toggle-debug-on-error
  "P" #'smartparens-strict-mode
  "S" #'show-smartparens-mode
  "X" #'toggle-debug-on-quit
  "e" #'eldoc-mode
  "l" #'hl-line-mode
  "n" #'linum-mode
  "p" #'smartparens-mode
  "r" #'rainbow-mode
  "t" #'treemacs
  "w" #'whitespace-mode)

(defvar-keymap prefix-buffer-map-ctrl-w
  :doc "Prefix map for C-q for Windows."
  "M-n" #'windmove-display-new-frame
  "C-d" #'windmove-delete-down
  "C-u" #'windmove-delete-up
  "C-l" #'windmove-delete-left
  "C-r" #'windmove-delete-right
  "f" #'make-frame-command)


(defvar-keymap prefix-command-q
  :doc "Prefix Map for C-q:"
  ";" #'nc/goto-emacs-config
  ":" #'avy-goto-char-timer
  "/" #'nc/consult-line-symbol-at-point
  "a" #'embark-act
  "b" #'nc/buffer-menu
  "f" #'nc/consult-fd-my-projects
  "l" #'nc/open-bookmark
  "g" #'nc/goto-menu
  "j" #'nc/jump-menu
  "C-d" prefix-buffer-map-ctrl-d
  "C-f" prefix-buffer-map-ctrl-f
  "C-q" #'major-mode-hydra
  "C-i" prefix-buffer-map-ctrl-i
  "C-k" prefix-buffer-map-ctrl-k
  "C-n" prefix-buffer-map-ctrl-n
  "C-o" prefix-buffer-map-ctrl-o
  "C-p" #'projectile-command-map
  "C-s" prefix-buffer-map-ctrl-s
  "C-t" prefix-buffer-map-ctrl-t
  "C-w" prefix-buffer-map-ctrl-w)


(which-key-add-keymap-based-replacements prefix-command-q
  "C-l" `("LSP" . ,prefix-buffer-map-ctrl-l)
  "C-d" `("Dired/Denote"  . ,prefix-buffer-map-ctrl-d)
  "C-f" `("File"  . ,prefix-buffer-map-ctrl-f)
  ;;"C-g" `("Goto My Files" . ,prefix-buffer-map-ctrl-g)
  "C-i" `("Insert" . ,prefix-buffer-map-ctrl-i)
  ;; "C-j" `("Jump" . ,prefix-buffer-map-ctrl-j)
  "C-k" `("Kill" . ,prefix-buffer-map-ctrl-k)
  "C-n" `("Notes" . ,prefix-buffer-map-ctrl-n)
  "C-o" `("Open" . ,prefix-buffer-map-ctrl-o)
  "C-s" `("Search" . ,prefix-buffer-map-ctrl-s)
  "C-t" `("Toggles" . ,prefix-buffer-map-ctrl-t)
  "C-w" `("Window" . ,prefix-buffer-map-ctrl-w)
  )

(keymap-set global-map "C-q" prefix-command-q)

(provide 'setup-keys)
;;; setup-keys.el ends here
