#+title: Emacs configuration with Org Mode
#+author: Nicolas Chapon
#+email: nchapon@gmail.com
#+startup: noinlineimages
#+property: header-args :results silent

* About this document
This is a GNU Emacs configuration file, written as an Org document.
As a result =init.el= and =early-init.el= files are created, located in the same directory as this file, as well as some other files across the system.
You can review which files are created by searching for =:tangle= entries in this document.
Both =init.el= and =early-init.el= and all created files in =./lisp= directory are in read only mode by default, and only this file is meant for editing, and the changes are automatically tangled on save.

Code block below is included in each generatde file :

#+name: nc-header
#+begin_src emacs-lisp
  ;; Author: Nicolas CHAPON
  ;; Keywords: Emacs configuration
  ;; Homepage:

  ;;; Commentary:
  ;; Emacs config file.
  ;; This file was automatically generated by `org-babel-tangle'.
  ;; Do not change this file.  Main config is located in Readme.org at `user-emacs-directory'

  ;;; Code:
#+end_src
** Inspirations
Some parts at this configuration file are copied / adapted from some useful configuration :
- https://www.lucacambiaghi.com/vanilla-emacs/readme.html
- [[https://github.com/MatthewZMD/.emacs.d]]
- https://gitlab.imt-atlantique.fr/jnbazin/emacs-config/-/blob/master/emacs-init.org (french)

* Early Init

Emacs 27 introduced new initialization file called =early-init.el=, which is executed before =init.el=.
It is meant to configure package initialization and early graphical interface tweaks, before actually drawing a window.

#+begin_src emacs-lisp :tangle early-init.el :noweb yes
  ;;; early-init.el --- Early initialization -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src

** Garbage Collection and Performance
One of the main reasons why Emacs startup time is big is that the garbage collection is invoked a lot, causing the increase of the startup time.
This can be migrated by setting high GC threshold and restoring it back in =after-init-hook=.

#+begin_src emacs-lisp :tangle early-init.el
  (defvar nc--gc-cons-threshold gc-cons-threshold)
  (defvar nc--gc-cons-percentage gc-cons-percentage)
  (defvar nc--file-name-handler-alist file-name-handler-alist)

  (setq-default gc-cons-threshold 402653184
                gc-cons-percentage 0.6
                file-name-handler-alist nil)

  (defun nc/restore-defaults-after-init ()
    "Restore default values after initialization."
    (setq-default gc-cons-threshold nc--gc-cons-threshold
                  gc-cons-percentage nc--gc-cons-percentage
                  file-name-handler-alist nc--file-name-handler-alist))

  (add-hook 'after-init-hook #'nc/restore-defaults-after-init)

  (setq read-process-output-max (* 1024 1024 4) ; 4mb
        inhibit-compacting-font-caches t
        message-log-max 16384)
#+end_src

** Native Compiled Emacs Lisp
Emacs 28 can compile Emacs Lisp to native code.
These settings enable background asynchronous compilation, and dynamic reloading of compiled modules.

#+begin_src emacs-lisp :tangle early-init.el
  (when (featurep 'native-compile)
    (setq native-comp-deferred-compilation t)
    (setq native-comp-async-report-warnings-errors nil))
#+end_src

** Straight
Straight is an alternative way to manage package installations.
It can install packages from Git repositories listed on ELPA, MELPA, and directly from Git URLs.

#+begin_src emacs-lisp :tangle early-init.el
  (defvar straight-process-buffer)
  (setq-default straight-process-buffer " *straight-process*")

  (defvar straight-build-dir)
  (setq straight-build-dir (format "build-%s" emacs-version))

  (defvar bootstrap-version)
  (let ((bootstrap-file
     (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
       'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Early =package.el= settings
=package.el= initialization is expensive, thus should be disabled before loading main init file:

#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

** Loading of elisp files
Prefer loading newer files to the byte-compiled ones that have older time-stamp when running non-interactively to prevent the use of stale byte-code.
Saves us a little IO time to skip the mtime checks on every =*.elc= file.

#+begin_src emacs-lisp :tangle early-init.el
  (setq load-prefer-newer noninteractive)
#+end_src

** Provide early-init
This concludes the =early-init.el= file.

#+begin_src emacs-lisp :tangle early-init.el
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Init configuration
:properties:
:header-args+: :tangle "./init.el"
:end:
Main GNU Emacs init file =init.el=.

#+begin_src emacs-lisp :noweb yes
  ;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src


** Loading =early-init.el= in Emacs 26 and earlier
When using pre Emacs 27 =eraly-init.el= must be loaded manually before anything from =init.el=.

#+begin_src emacs-lisp
  (unless (featurep 'early-init)
    (load (expand-file-name "early-init" user-emacs-directory)))
#+end_src

** Package Management
*** =use-package=
A macro for managing installed packages, and encapsulating their configurations.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (defvar straight-use-package-by-default)
  (setq straight-use-package-by-default t)
  (require 'use-package)
#+end_src
*** Diminish
Remove minor modes from mode line
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** Exec Path From Shell

[[https://github.com/purcell/exec-path-from-shell][Exec Path From Shell]] A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.

This happens a lot on OS X, where an Emacs instance started from the GUI inherits a default set of environment variables.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (progn
        (exec-path-from-shell-initialize)
        ;; (exec-path-from-shell-copy-env "GOPATH")
        ;;(exec-path-from-shell-copy-env "JAVA_HOME")
        ;; (exec-path-from-shell-copy-env "PATH")
        ;; (exec-path-from-shell-copy-env "RUST_SRC_PATH")
        )))
#+end_src

** No Littering

Help keeping =~/.emacs.d= clean.
[[https://github.com/emacscollective/no-littering][https://github.com/emacscollective/no-littering]]

#+begin_src emacs-lisp
(use-package no-littering)
#+end_src
** Setup modules

Add setup modules and conclude the =init.el= file.

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  (require 'setup-prefs)
  (require 'setup-ui)
  (require 'setup-keys)
  (require 'setup-windows)
  (require 'setup-core)
  (require 'setup-completion)
  (require 'setup-org)
  (require 'setup-programming)
  (require 'setup-shell)
  (require 'setup-functions)

  (provide 'init)
  ;;; init.el ends here
#+end_src

* Global Preferences
:properties:
:header-args+: :tangle "./lisp/setup-prefs.el"
:end:

Global preferences module automatically tangled in =./lisp/setup-prefs.el=
#+begin_src emacs-lisp :noweb yes
  ;;; setup-prefs.el --- Global Preferences module -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src

** Personal Information
 #+begin_src emacs-lisp
 (setq user-full-name "Nicolas Chapon"
         user-mail-address "nchapon@gmail.com")
 #+end_src

** Define constants

#+begin_src emacs-lisp
  (defconst is-mac (equal system-type 'darwin))
  (defconst is-linux (equal system-type 'gnu/linux))
  (defconst is-windows (equal system-type 'windows-nt))
  (defconst has-gui (display-graphic-p))
#+end_src
** Customization File
To avoid overloading the GNU Emacs custormization =init.el= file made by the
user with the UI, I add the generated code in a separate file.

#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+end_src
** Better Defaults
Small configs for better emacs experience...

#+begin_src emacs-lisp
  (setq initial-major-mode 'lisp-interaction-mode
        redisplay-dont-pause t
        column-number-mode t
        echo-keystrokes 0.02
        fill-column 80
        transient-mark-mode t
        shift-select-mode nil
        require-final-newline t
        truncate-partial-width-windows nil
        delete-by-moving-to-trash t
        confirm-nonexistent-file-or-buffer nil
        query-replace-highlight t
        ring-bell-function 'ignore
        sentence-end-double-space nil)
 #+end_src

*** Transparently open compressed files
 #+begin_src emacs-lisp
 (auto-compression-mode t)
 #+end_src

*** Answering just 'y' or 'n'

 #+begin_src emacs-lisp
 (defalias 'yes-or-no-p 'y-or-n-p)
 #+end_src

*** Indentation & Tabs

 Always spaces with width of 4
 #+begin_src emacs-lisp
 (setq-default indent-tabs-mode nil)
 (setq-default tab-width 4)
 #+end_src
*** TODO Indent new line if necessary
Remove to bindings
#+begin_src emacs-lisp
 (define-key global-map (kbd "RET") 'newline-and-indent)
 #+end_src
** UTF-8 Encoding

 Set all coding systems to utf-8
 #+begin_src emacs-lisp
 (prefer-coding-system 'utf-8-unix)
 (set-clipboard-coding-system 'utf-8-unix)
 (set-default-coding-systems 'utf-8-unix)
 (set-keyboard-coding-system 'utf-8-unix)
 (set-language-environment 'utf-8)
 (set-selection-coding-system 'utf-8-unix)
 (set-terminal-coding-system 'utf-8-unix)
 (setq locale-coding-system 'utf-8-unix)
 (setq coding-system-for-write 'utf-8-unix)
 (setq default-buffer-file-coding-system 'utf-8-unix)
 (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
 (setq file-name-coding-system  'utf-8)
 #+end_src
** French Calendar & Holydays
 French Calendar & Holidays
 #+begin_src emacs-lisp
   (setq calendar-week-start-day 1
         calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                                  "Jeudi" "Vendredi" "Samedi"]
         calendar-month-name-array ["Janvier" "Fevrier" "Mars" "Avril" "Mai"
                                    "Juin" "Juillet" "Aout" "Septembre"
                                    "Octobre" "Novembre" "Decembre"])
 #+end_src

 #+begin_src emacs-lisp
   (defvar french-holiday
     '((holiday-fixed 1 1 "Jour de l'an")
       (holiday-fixed 5 1 "Fête du travail")
       (holiday-fixed 5 8 "Victoire 45")
       (holiday-fixed 7 14 "Fête nationale")
       (holiday-fixed 8 15 "Assomption")
       (holiday-fixed 11 1 "Toussaint")
       (holiday-fixed 11 11 "Armistice 18")
       (holiday-fixed 12 25 "Noël")
       (holiday-easter-etc 1 "Lundi de Pâques")
       (holiday-easter-etc 39 "Ascension")
       (holiday-easter-etc 50 "Lundi de Pentecôte")))

   (setq calendar-date-style 'european
         calendar-holidays french-holiday
         calendar-mark-holidays-flag t
         calendar-mark-diary-entries-flag t)

 #+end_src


** MacOS
Some custom preferences dedicated to MacOS
- keys for apple keyboard
- use the right ~⌥~ key to write symbols ={[]}=. The left ~⌥~ key can be used as the Meta
- GPG
- ...

 #+begin_src emacs-lisp
   (when is-mac
     ;; Keys for Appel keyboard
     (setq mac-command-modifier 'meta)    ; make cmd key do Meta
     (setq mac-option-modifier 'super)    ; make opt key do Super
     (setq mac-control-modifier 'control) ; make Control key do Control
     (setq ns-function-modifier 'hyper)   ; make Fn key do Hyper

     ;; Write Symbols [{}]
     (setq-default mac-right-option-modifier nil)

     ;; GPG
     (setf epa-pinentry-mode 'loopback)

     ;; Freench Locale
     (set-locale-environment "fr_FR.UTF-8"))
 #+end_src
** Uniquify

Uniquify file path to ensure buffer name uniqueness

#+begin_src emacs-lisp
  (use-package uniquify
    :straight nil
    :custom
    (uniquify-buffer-name-style 'forward)
    (uniquify-separator "/")
    (uniquify-after-kill-buffer-p t)
    (uniquify-ignore-buffers-re "^\\*")
  )
#+end_src
** Recent Files

 #+BEGIN_QUOTE
 Recentf is a minor mode that builds a list of recently opened
 files. This list is is automatically saved across sessions on exiting
 Emacs - you can then access this list through a command or the menu.

 [[https://www.emacswiki.org/emacs/RecentFiles][https://www.emacswiki.org/emacs/RecentFiles]]
 #+END_QUOTE

 #+begin_src emacs-lisp
   (use-package recentf
     :straight nil
     :custom
     (recentf-auto-cleanup "09:00am")
     (recentf-max-saved-items 300)
     (recentf-exclude '((expand-file-name package-user-dir)
                        ".cache"
                        ".cask"
                        ".elfeed"
                        "bookmarks"
                        "cache"
                        "ido.*"
                        "persp-confs"
                        "recentf"
                        "undo-tree-hist"
                        "url"
                        "COMMIT_EDITMSG\\'")))

   ;; When buffer is closed, saves the cursor location
   (save-place-mode 1)

   (recentf-mode 1)

   ;; Set history-length longer
   (setq-default history-length 500)

 #+end_src


** Hippie Expand
[[https://www.emacswiki.org/emacs/HippieExpand][Hippie Expand]] custom configuration 
Fix Conflict with company-complete
#+begin_src emacs-lisp
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol))
  
  (global-set-key (kbd "M-/") #'hippie-expand)
#+end_src
* UI
:properties:
:header-args+: :tangle "./lisp/setup-ui.el"
:end:

UI configuration module automatically tangled in =./lisp/setup-ui.el=

#+begin_src emacs-lisp :noweb yes
  ;;; setup-ui.el --- UI configuration module -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src
** Minimalistic UI
*** No menu and toolbar

#+begin_src emacs-lisp
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

*** No welcome screen

#+begin_src emacs-lisp
(setq  inhibit-startup-message t)
#+end_src

*** Make fringe smaller

#+begin_src emacs-lisp
  (if (fboundp 'fringe-mode)
      (fringe-mode 2))
#+end_src
** All The Icons
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** Theme
Using moe theme dark all the day
#+begin_src emacs-lisp
  (use-package doom-themes

    :config

    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; or for treemacs users
    ;;(doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (with-eval-after-load 'org-mode
        (doom-themes-org-config))
    )
#+end_src
** Mode line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-init))
#+end_src

** Font
Use Input Font (http://input.fontbureau.com/)  on Linux, Monaco on MacOS

#+begin_src emacs-lisp
  (defun nc/setup-font ()
    "Set up font height"
    (interactive)
    (when is-linux
      (set-frame-font "Input Mono-12" nil t))
    (when is-mac
      (set-frame-font "Monaco 15" nil t))
    (when is-windows
      (set-frame-font "Consolas" nil t))
    )

  (when has-gui
    (add-hook 'after-init-hook #'nc/setup-font))
#+end_src

* Key Bindings
:properties:
:header-args+: :tangle "./lisp/setup-keys.el"
:end:
Key bindings configuration module automatically tangled in =./lisp/setup-keys.el=
#+begin_src emacs-lisp :noweb yes
  ;;; setup-keys.el --- Key Bindings module -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src


** Global Key Bindings
Emacs Global Bindings are redefined here.
#+begin_src emacs-lisp
  ;; Unbind unneeded keys
  (global-set-key (kbd "C-z") nil)
  (global-set-key (kbd "M-z") nil)
  (global-set-key (kbd "C-x C-z") nil)
  (global-set-key (kbd "M-o") nil)


  (global-set-key (kbd "C-+") #'text-scale-increase)
  (global-set-key (kbd "C--") #'text-scale-decrease)

  ;; Prefer backward-kill-word over Backspace
  (global-set-key (kbd "C-w") #'backward-kill-word)
  (global-set-key (kbd "C-x C-k") #'kill-region)

  (global-set-key (kbd "C-x C-r") #'recentf-open-files)

  ;; Move up/down paragraph
  (global-set-key (kbd "M-n") #'forward-paragraph)
  (global-set-key (kbd "M-p") #'backward-paragraph)

  ;; Goto Line
  ;;(global-set-key (kbd "M-g") #'goto-line)

  ;; Functions
  (global-set-key (kbd "<f5>") #'revert-buffer)

#+end_src
** Personal keyboard map

#+begin_src emacs-lisp
  (bind-keys
   :prefix-map nc-map
   :prefix-docstring "My own keyboard map"
   :prefix "C-<"
   ;; 2013-03-31: http://stackoverflow.com/questions/3124844/what-are-your-favorite-global-key-bindings-in-emacs
   (";" . nc/goto-emacs-config)
   ("<tab>" . expand-abbrev))
#+end_src
** Key Chords

#+begin_src emacs-lisp
  (use-package key-chord
    :init
    (key-chord-mode 1)
    (key-chord-define-global "FF" 'projectile-find-file)
    (key-chord-define-global "GG" 'consult-ripgrep)
    (key-chord-define-global "OO" 'consult-outline)
    (key-chord-define-global "DD" 'delete-region)
    (key-chord-define-global "??" 'nc/search-notes)
    (key-chord-define-global "BB" 'beginning-of-buffer)
    (key-chord-define-global "$$" 'end-of-buffer))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][Which Key]] is a minor mode for Emacs that displays the key bindings following
your currently entered incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-mode))
#+end_src
* Windows
:properties:
:header-args+: :tangle "./lisp/setup-windows.el"
:end:

Windows configuration module automatically tangled in =./lisp/setup-windows.el=

#+begin_src emacs-lisp :noweb yes
  ;;; setup-windows.el --- Windows configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src


** Ace Window
[[https://github.com/abo-abo/ace-window][ace-window]] Quickly switch and move windows

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (([remap other-window] . ace-window))
    :config
    (setq aw-keys '(?q ?s ?d ?f ?g ?h ?j ?k ?l))
    ;; increase size face
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))))
 #+end_src

** Golden Ratio

 Resize automatically the windows you are working

 #+begin_src emacs-lisp
   (use-package golden-ratio
     :diminish t
     :init
     (golden-ratio-mode 1)
     :config
     (setq golden-ratio-extra-commands
           (append golden-ratio-extra-commands
                   '(ace-window))))
 #+end_src


** Toggle Window Split Horizontally

Bound to =C-z w -=.
#+begin_src emacs-lisp
  (defun nc/toggle-split-window-horizontally ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

  (bind-key "wh" 'nc/toggle-split-window-horizontally nc-map)
#+end_src


** Toggle Window Split Vertically 
Split window right with =C-< w v= and move there.
If windows are splitted delete other windows.
#+begin_src emacs-lisp
  (defun nc--split-window-right-and-move-there-dammit ()
    (split-window-right)
    (windmove-right))

  (defun nc/toggle-split-window-vertically ()
    (interactive)
    (if (> (count-windows) 1)
        (delete-other-windows)
      (nc--split-window-right-and-move-there-dammit)))

  (bind-key "wv" 'nc/toggle-split-window-vertically nc-map)
  (bind-key "C-w" 'nc/toggle-split-window-vertically nc-map)
  #+end_src


* Core Packages
:properties:
:header-args+: :tangle "./lisp/setup-core.el"
:end:

Core packages configuration module automatically tangled in =./lisp/setup-core.el=

#+begin_src emacs-lisp :noweb yes
  ;;; setup-core.el --- Core packages configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src

** Avy

#+begin_src emacs-lisp
  (use-package avy
    :defer t
    :bind
    (:map nc-map ((">" . avy-goto-char-timer)
                 ("l" . avy-goto-line)))
    :custom
    (avy-timeout-seconds 0.3)
    (avy-style 'pre)
    :custom-face
    (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))))
#+end_src

** Crux
[[https://github.com/bbatsov/crux][Crux]] A Collection Of Ridiculosy Useful eXtensions for Emacs
#+begin_src emacs-lisp
  (use-package crux
    :bind
    (("C-a" . crux-move-beginning-of-line)
     ("C-c d" . crux-duplicate-current-line-or-region)
     ("C-x 4 t" . crux-transpose-windows)
     ("C-x K" . crux-kill-other-buffers)
     ("C-k" . crux-smart-kill-line)
     ("M-j" . crux-top-join-line))
    (:map nc-map ("C-j" . crux-top-join-line))
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+end_src

** Dired
*** Dired
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :bind
    (("C-x C-j" . dired-jump))
    :custom
    ;; Always delete and copy recursively
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto refresh Dired, but be quiet about it
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Quickly copy/move file in Dired
    (dired-dwim-target t)
    ;; Move files to trash when deleting
    (delete-by-moving-to-trash t)
    ;; Load the newest version of a file
    (load-prefer-newer t)
    ;; Detect external file changes and auto refresh file
    (auto-revert-use-notify nil)
    (auto-revert-interval 3) ; Auto revert every 3 sec


    :config
    ;; Enable global auto-revert
    (global-auto-revert-mode t)

    (put 'dired-find-alternate-file 'disabled nil)
    ;; Using GNU ls on macOS instead of ls
    (if (executable-find "gls")
        (progn
          (setq insert-directory-program "gls")
          (setq dired-listing-switches "-lFaGh1v --group-directories-first"))
      (setq dired-listing-switches "-ahlF"))

    :hook
    (dired-mode . (lambda ()
                    (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                    (local-set-key (kbd "RET") #'dired-find-alternate-file)
                    (local-set-key (kbd "^")
                                   (lambda () (interactive) (find-alternate-file ".."))))))

#+end_src
*** Dired Narrow

[[https://github.com/Fuco1/dired-hacks/tree/7c0ef09d57a80068a11edc74c3568e5ead5cc15a#dired-narrow][Dired Narrow]] provides live filtering of files in dired buffers. In
general, after calling the respective narrowing function you type a
filter string into the minibuffer.

#+begin_src emacs-lisp
  (use-package dired-narrow
    :commands dired-narrow
    :after dired
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))
#+end_src

*** Font Lock Dired

[[https://github.com/purcell/diredfl][Diredfl]] Extra font lock rules for a  more colorful dired.

#+begin_src emacs-lisp
  (use-package diredfl
    :init (diredfl-global-mode 1))
#+end_src


** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] Project interaction library for emacs.

#+begin_src emacs-lisp
  (use-package projectile
    :custom
    (projectile-sort-order 'recently-active)
    :config
    (projectile-global-mode)
    :init
      (setq projectile-enable-caching t)
      ;; Custom mode line
      (setq projectile-mode-line '(:eval (format " Ⓟ[%s]" (projectile-project-name))))
    :bind-keymap ("C-c p" . projectile-command-map))
#+end_src

** Expand region
#+BEGIN_QUOTE
Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.

[[https://github.com/magnars/expand-region.el]]
#+END_QUOTE

- expand selection with =C-==
- contract with negative argument =M--= then =C-==

 #+begin_src emacs-lisp
 (use-package expand-region
   :bind
   ("C-=" . er/expand-region))
 #+end_src

** Multiple Cursors

 [[https://github.com/magnars/multiple-cursors.el][multiple-cursors.el]] This package can create several cursors to all do the same things.

 #+begin_src emacs-lisp
   (use-package multiple-cursors
     :bind
     (("C-S-c C-S-c" .  mc/edit-lines)
      ("C-$" .  mc/edit-ends-of-lines)
      ("C-S-b" .  mc/edit-beginnings-of-lines)
      ;; Conflict my own map
      ;("C-<" .  mc/mark-previous-word-like-this) 
      ;("C->" .  mc/mark-next-word-like-this)
      ("C-S-n" .  mc/mark-next-like-this)
      ("C-S-p" .  mc/mark-previous-like-this)
      ("C-*" .  mc/mark-all-dwim)))
 #+end_src

** Undo Tree
 This lets you use =C-x u= (=undo-tree-visualize=)
 #+begin_src emacs-lisp
   (use-package undo-tree
     :diminish undo-tree-mode
     :config
     (progn
       (global-undo-tree-mode)
       (setq undo-tree-visualizer-timestamps t)
       (setq undo-tree-visualizer-diff t)))
 #+end_src

** Ediff

 From : [[https://www.emacswiki.org/emacs/EdiffMode]]

 You can ignore whitespace or case sensitivity in two ways:
- Interactively, on the fly:
   - Whitespace sensitivity – Toggle with =##= (=ediff-toggle-skip-similar=).
   - Case sensitivity – Toggle with =#c= (=ediff-toggle-ignore-case=). This assumes that you’ve loaded library Lisp:ediff+.el and that you are using `diff(1)’ as ‘ediff-diff-program’. (Toggling case-sensitivity is available in vanilla GNU Emacs 22, so Lisp:ediff+.el is mainly useful for older Emacs versions.)
 - Persistently: Customize option =ediff-diff-options=. This assumes that you are using `diff(1)’ as ‘ediff-diff-program’.
    - Whitespace insensitivity – Include ‘-w’ in =ediff-diff-options=.
    - Case insensitivity – Include ‘-i’ in =ediff-diff-options=.

#+begin_src emacs-lisp
  (use-package ediff
    :straight nil
    :custom
     ;; Ediff should be opened in selected frame and split window horizontally
    (ediff-window-setup-function 'ediff-setup-windows-plain)
    (ediff-split-window-function 'split-window-horizontally)
    (ediff-diff-options "-w")
    :config
    ;; Pour éviter des ouvertures de frames intempestives
    (advice-add 'ediff-window-display-p :override 'ignore))
#+end_src


** Magit

#+BEGIN_QUOTE
Magit a git porcelain inside Emacs !

[[https://github.com/magit/magit]]
#+END_QUOTE

#+begin_src emacs-lisp
  (use-package magit

    :init
    (when (getenv "GIT_EXECUTABLE")
      (setq magit-git-executable (getenv "GIT_EXECUTABLE")))

    :bind (("C-x g" . magit-status)
           ("<f6>" . magit-status )
           ("C-<f6>" . magit-log-buffer-file)))
#+end_src


** Treemacs

#+begin_quote
Treemacs - A tree layout file explorer for Emacs

https://github.com/Alexander-Miller/treemacs
#+end_quote

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-o") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   t
            treemacs-file-event-delay                5000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map nc-map ("t" . treemacs))
    (:map global-map
          ("M-o"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)
#+end_src

** Rainbow mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-mode)
  (diminish 'rainbow-mode))
#+end_src

** Yasnippet
Snippets for programming.

 #+begin_src emacs-lisp
   (use-package yasnippet
     :ensure t
     :diminish yas-minor-mode
     :config
     (use-package yasnippet-snippets)
     :hook
     (after-init . yas-global-mode))
 #+end_src

Consult integration
#+begin_src emacs-lisp
  (use-package consult-yasnippet
    :bind
    (:map nc-map 
          ("y" . consult-yasnippet)))
#+end_src

* Completion
:properties:
:header-args+: :tangle "./lisp/setup-completion.el"
:end:

Completion configuration automatically tangled in =./lisp/setup-completion.el=
#+begin_src emacs-lisp :noweb yes
  ;;; setup-completion.el --- Completion configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src

** Selectrum

#+begin_src emacs-lisp

  (use-package selectrum
    :init (selectrum-mode +1))
  (use-package prescient
    :config (prescient-persist-mode +1))
  (use-package selectrum-prescient
    :init (selectrum-prescient-mode +1) :after selectrum)

#+end_src
** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :bind (:map minibuffer-local-map
                ("C-M-a" . marginalia-cycle))
    :init
    (marginalia-mode)
    (advice-add #'marginalia-cycle :after
                (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))
    (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src



** Consult

     [[https://github.com/minad/consult][Consult]] Consulting completion Read with some custom bindings :
     - =<C-< s f>= consult-ripgrep : find file in current project
     - =<F2>= consult-ripgrep : search in project files with =rg=  

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x C-r" . consult-recent-file)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("C-< s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("<f2>" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("C-s" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch)
           :map isearch-mode-map
           ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer.
    ;; This is relevant when you use the default completion UI,
    ;; and not necessary for Vertico, Selectrum, etc.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
  )


  (use-package consult-dir
    :ensure t
    :bind (("C-x C-d" . consult-dir)
           :map selectrum-minibuffer-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file)))
#+end_src
** Embark

[[https://github.com/oantolin/embark][Embark]] Emacs Minibuffer Actions Rooted in Key Maps

#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))

    ;; Custom some actions
    (define-key embark-defun-map "j" 'crux-top-join-line)
    (define-key embark-symbol-map "j" 'crux-top-join-line)
    (define-key embark-expression-map "j" 'crux-top-join-line)

    (define-key embark-file-map (kbd "S") 'nc/sudo-find-file))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))


#+end_src

** Company

   #+begin_src emacs-lisp
     (use-package company
       :diminish ""
       :bind (("M-/" . company-complete)
              :map company-active-map
              ("C-p" . company-select-previous)
              ("C-n" . company-select-next)
              ("TAB" . company-complete-common-or-cycle)
              ("<tab>" . company-complete-common-or-cycle)
              ("C-d" . company-show-doc-buffer))
       :hook (after-init . global-company-mode)

       :custom
       (company-idle-delay 0.1)
       (company-require-match 'never)
       (company-minimum-prefix-length 2)
       (company-tooltip-align-annotations t)
       (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                            company-preview-frontend
                            company-echo-metadata-frontend))
       (company-backends '(company-capf company-files company-dabbrev-code company-semantic))
       (company-tooltip-minimum-width 30)
       (company-tooltip-maximum-width 120))


  #+end_src

[[https://github.com/company-mode/company-statistics/][company-statistics]] extension to show the top ranked candidates

  #+begin_src emacs-lisp
    (use-package company-statistics
      :after company
      :config
      (company-statistics-mode 1))
   #+end_src

* Org
:properties:
:header-args+: :tangle "./lisp/setup-org.el"
:end:

Org mode configuration automatically tangled in =./lisp/setup-org.el=
#+begin_src emacs-lisp :noweb yes
  ;;; setup-org.el --- Org mode configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src


** Org Base Configuration

#+begin_src emacs-lisp
  (use-package org

    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("<f12>" . org-agenda)
           ("C-c C-b" . org-iswitchb))

    :config
    ;; New template exapnsion
    (require 'org-tempo)

    (setq org-ellipsis " ⬎"
          org-cycle-separator-lines 0                 ;; Hide empty lines between subtrees
          org-catch-invisible-edits 'show-and-error   ;; Avoid inadvertent text edit in invisible area
          )

    (set-face-attribute 'org-ellipsis nil :underline nil)

    ;; Autamatically add =ID= (unique identifier) in heading drawers to keep links unique
    (require 'org-id)
    (setq org-id-method 'uuidgen)
    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

    (require 'org-crypt)
    (org-crypt-use-before-save-magic)

    (add-to-list 'org-tags-exclude-from-inheritance "crypt")
    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
    (setq org-crypt-key "0DF2D6C6E8443FE7"))

    (use-package org-contrib)
#+end_src

** Org UI
*** Org Bullets

#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :after org
  :custom (org-bullets-bullet-list '("◉" "✿" "★" "•")))

;; Hiding leading bullets in headers
(setq org-hide-leading-stars t)
#+end_src

*** Org Heading Styles

#+begin_src emacs-lisp
  (let* ((variable-tuple (cond ((x-list-fonts "Input Sans") '(:font "Input Sans"))
                               ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                               ((x-list-fonts "Verdana")         '(:font "Verdana"))
                               ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                               (nil (warn "Cannot find a Sans Serif Font.  Install Open Sans."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight normal :foreground ,base-font-color)))

    (custom-theme-set-faces 'user
                            '(org-special-keyword  ((t (:inherit (font-lock-comment-face fixed-pitch)) :foreground "#69ffeb")))

                            `(org-level-8 ((t (,@headline ,@variable-tuple))))
                            `(org-level-7 ((t (,@headline ,@variable-tuple))))
                            `(org-level-6 ((t (,@headline ,@variable-tuple))))
                            `(org-level-5 ((t (,@headline ,@variable-tuple))))
                            `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
                            `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2 :foreground "#ff8a69"))))
                            `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.3 :foreground "#ffd569"))))
                            `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5 :foreground "#ffaf69"))))
                            `(org-document-title ((t (,@headline ,@variable-tuple :height 1.8 :underline nil :foreground "#e6b68d"))))
                            `(org-document-info         ((t (:foreground "#697dff"))))
                            `(org-document-info-keyword         ((t (:foreground "#697dff"))))
                            `(header-line ((t (:background "#697dff" :height 220))))
                            '(org-special-keyword-face ((t (:foreground "#697dff"))))

                            '(org-block-begin-line ((t (:foreground "#69ffeb"))))
                            '(org-verbatim ((t (:foreground "#69ffeb"))))
                            '(org-table ((t (:foreground "#fae196"))))
                            `(org-checkbox ((t (:foreground "#ff4c4f"
                                           :box (:line-width 1 :style released-button)))))
                            `(org-date ((t (:foreground "#69ffeb"))))
                            `(org-tag ((t (:foreground "#e6b68d"))))

                            `(org-checkbox-statistics-todo ((t (:foreground "#ff4c4f"))))
                            '(org-list-dt               ((t (:foreground "#ff4c4f"))))
                            '(org-link                  ((t (:foreground "#697dff" :underline t))))))
#+end_src


*** org-fancy-priorities

#+begin_src emacs-lisp
(use-package org-fancy-priorities
      :diminish
      :defines org-fancy-priorities-list
      :hook (org-mode . org-fancy-priorities-mode)
      :config (setq org-fancy-priorities-list '("⚡" "⬆" "⬆" "⬇")))

#+end_src

Change priorities colors

#+begin_src emacs-lisp
(setq org-lowest-priority ?D
        org-default-priority ?D
        org-priority-faces '((?A . (:foreground "red" :weight bold))
                             (?B . (:foreground "orange"))
                             (?C . (:foreground "yellow"))
                             (?D . (:foreground "green"))))
#+end_src


*** Startup Indented
#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-pretty-entities t
        ;; show actually italicized text instead of /italicized text/
        org-hide-emphasis-markers t
        org-fontify-quote-and-verse-blocks t)
#+end_src


** My Org Files

 My default org files

 #+begin_src emacs-lisp
   (use-package org
     :custom
     (org-directory "~/notes")
     :config
     
     (defconst nc/org-default-projects-dir (concat org-directory "/projects"))
     (defconst nc/org-default-projects-file (concat org-directory "/projects.org"))
     (defconst nc/org-default-resources-dir (concat org-directory "/resources"))
     (defconst nc/org-default-archives-dir (concat org-directory "/archives"))
     (defconst nc/org-default-personal-dir (concat org-directory "/personal"))
     (defconst nc/org-default-completed-dir (concat org-directory "/projects/_completed"))
     (defconst nc/org-journal-dir (concat org-directory "/journal"))
     (defconst nc/inbox-file (concat org-directory "/gtd.org"))
     (defconst nc/org-default-inbox-file (concat org-directory "/gtd.org"))
     (defconst nc/org-default-tasks-file (concat org-directory "/gtd.org"))
     (defconst nc/watching-file (concat org-directory "/personal/watching.org"))
     (defconst nc/reading-file (concat org-directory "/personal/books.org"))
     (defconst nc/org-default-media-files (concat org-directory "/personal/watching.org"))
     (defconst nc/org-default-someday-file (concat org-directory "/someday.org"))
     (defconst nc/fishing-file (concat org-directory "/personal/sports/fishing.org"))
     (defconst nc/calendar-file (concat org-directory "/personal/calendar.org"))
     (defconst nc/weekly-review-file (concat org-directory "/personal/reviews/weekly-review.org"))


     (defun nc/goto-inbox ()
       (interactive)
       (find-file nc/inbox-file )
       (widen)
       (beginning-of-buffer)
       (re-search-forward "* Inbox")
       (beginning-of-line))

     (bind-key "gi" 'nc/goto-inbox nc-map)


     (defun nc/goto-resources-dir ()
       (interactive)
       (dired nc/org-default-resources-dir))

     (bind-key "gR" 'nc/goto-resources-dir nc-map)

     (defun nc/goto-archives-dir ()
       (interactive)
       (dired nc/org-default-archives-dir))

     (bind-key "gA" 'nc/goto-archives-dir nc-map)

   )
 #+end_src


** Journal
 Function to easily load weekly journal
 #+begin_src emacs-lisp

   (defun nc/goto-journal-file ()
         "Create and load a journal file based on today's date."
         (interactive)

         (find-file (nc--get-journal-file-today)))

   (defun nc--get-journal-file-today ()
         "Return today's journal file."
         (let ((daily-name (format-time-string "%Y-W%W")))
           (expand-file-name (concat nc/org-journal-dir "/" daily-name ".org"))))

   (setq org-default-notes-file (nc--get-journal-file-today))

   (bind-key "gj" 'nc/goto-journal-file nc-map)
   (bind-key "j" 'nc/goto-journal-file nc-map)
 #+end_src


Insert daily heading in journal file =C-<-o-d=

   #+begin_src emacs-lisp
     (defun nc--autoinsert-yas-expand ()
           "Replace text in yasnippet template."
           (yas-expand-snippet (buffer-string) (point-min) (point-max)))

         (setq auto-insert 'other
               auto-insert-directory (concat org-directory "/templates"))

         (define-auto-insert "\\.org\\'" ["week.org" nc--autoinsert-yas-expand])


       (defun nc/journal-file-insert ()
         "Insert's the journal heading based on the file's name."
         (interactive)
         (let* ((datim (current-time)))

           (insert (format-time-string (concat "%A %d %B %Y") datim))


           ;; Note: The `insert-file-contents' leaves the cursor at the
           ;; beginning, so the easiest approach is to insert these files
           ;; in reverse order:

           ;; If the journal entry I'm creating matches today's date:

             ;; Insert dailies that only happen once a week:
             (let ((weekday-template (downcase
                                      (format-time-string "templates/journal-%A.org"))))
               (when (file-exists-p weekday-template)
                 (insert-file-contents weekday-template)))

             (insert "\n")

             ;; (let ((contents (buffer-string)))
             ;;   (delete-region (point-min) (point-max))
             ;;   (yas-expand-snippet contents (point-min) (point-max)))

             ))

     (defun nc/insert-daily-heading ()
       "Insert Daily Heading in journal file"
       (interactive)
       (let ( (header-title (format-time-string "%Y-W%W" )))
         ;; Don't change location of point.
         (goto-char (point-min)) ;; From the beginning...
         (if (search-forward header-title)
             ;;(end-of-line)
             (progn
               (org-insert-heading-after-current)
               (nc/journal-file-insert)
               (org-shiftmetaright))
           (error "Insert failed"))))

     ;; bind-key
      (bind-key "od" 'nc/insert-daily-heading nc-map)
   #+end_src

** Tasks
My Todos tasks
  - parentheses indicate keyboard shortcuts
  - =@= prompts for a note
  - =!= logs the timestamp of the state change

 #+begin_src emacs-lisp
   (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "SOMEDAY(.)" "MAYBE(M)"  "|" "DONE(d)")
      (sequence "STARTED(s)" "WAITING(w@/!)" "|" "CANCELLED(c@/!)" "INACTIVE(i@)")
      (sequence "MEETING(m)" "RDV(r)"  "|" "DONE(d)")))
 #+end_src

Keep track when the task is completed.
 #+begin_src emacs-lisp
 (setq org-log-done 'time)
 #+end_src

 Tasks faces : colors from https://flatuicolors.com/

 #+begin_src emacs-lisp
   (setq org-todo-keyword-faces
         (quote (("TODO" :foreground "#c0392b" :weight bold)
                 ("NEXT" :foreground "#d35400" :weight bold)
                 ("STARTED" :foreground "#f39c12" :weight bold)
                 ("SOMEDAY" :foreground "#3498db" :weight bold)
                 ("DONE" :foreground "#27ae60" :weight bold)
                 ("WAITING" :foreground "#e74c3c" :weight bold)
                 ("INACTIVE" :foreground "#bdc3c7" :weight bold)
                 ("MEETING" :foreground "#e6b68d" :weight bold)
                 ("RDV" :foreground "#e6b68d" :weight bold)
                 ("MAYBE" :foreground "#3498db" :weight bold)
                 ("CANCELLED" :foreground "#7f8c8d" :weight bold))))
 #+end_src

** Tags (contexts)
In GTD tags are contexts
 #+begin_src emacs-lisp
   (setq org-tag-alist (quote ((:startgroup)
                               ("@office" . ?o)
                               ("@home" . ?h)
                               (:endgroup)
                               ("@computer" . ?c)
                               ("@reading" . ?r)
                               ("learning" . ?l)
                               ("emacs" . ?e)
                               (:newline)
                               ("WAITING" . ?w)
                               ("HOLD" . ?H)
                               ("CANCELLED" . ?c))))

   ;;(setq org-fast-tag-selection-single-key nil)
 #+end_src

Projects are marked with the =project= tag. They are supposed to
contain todo items, and are considered stuck unless they do. The
=project= tag should not be inheritable, because otherwise its tasks
will appear as projects.
 #+begin_src emacs-lisp
     (setq org-tags-exclude-from-inheritance '("project")
           org-stuck-projects '("+project/-DONE"
                                ("TODO" "NEXT") ()))
 #+end_src

** Capture templates

 #+begin_src emacs-lisp
   (setq org-capture-templates
           '(("t" "Task Entry"        entry
                 (file+headline nc/inbox-file "Inbox")
                 "* TODO %?\n:PROPERTIES:\n:CREATED:%U\n:END:\n\n%i\n\nFrom: %a"
                 :empty-lines 1)
             ("s" "Someday" entry (file+headline nc/inbox-file "Inbox")
               "* SOMEDAY %? :idea:\n%u" :clock-in t :clock-resume t)
             ("f" "FishLog" plain (file+datetree+prompt nc/fishing-file)
              "%[~/notes/templates/fishlog.org]")
             ("F" "Film" entry (file+headline nc/watching-file "Films à voir")
                  "* NEXT %^{Titre}
          %i
          - *Réalisateur:* %^{Auteur}
          - *Année:* %^{année}
          - *Genre:* %^{genre}

         %?

         %U" :prepend t)


              ("D" "Done Business Task" entry
                (file+headline nc/inbox-file "Tasks")
                "* DONE %^{Task} :@office:"
                :clock-in t :clock-resume t)
             ))
 #+end_src
*** TODO Meeting
 Should be moved in gcal.org

 #+begin_src emacs-lisp
 (add-to-list 'org-capture-templates
                  `("m" "Meeting" entry (file+headline nc/calendar-file "Réunions")
            "* MEETING %? :meeting:\n%U\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n"))
 #+end_src
*** TODO RendezVous
 Should be moved in gcal.org
 #+begin_src emacs-lisp
 (add-to-list 'org-capture-templates
                  `("a" "RendezVous" entry (file+headline nc/calendar-file "RendezVous")
                  "* RDV %? :rdv:\n%U\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n"))
 #+end_src
*** Link

 Bookmark entry are captured in journal Links heading.

 #+begin_src emacs-lisp
   (defun org-journal-find-bookmark ()
     ;; Open today's journal, but specify a non-nil prefix argument in order to
     ;; inhibit inserting the heading; org-capture will insert the heading.
     (nc/goto-journal-file)
     ;; Position point on the journal's top-level heading so that org-capture
     ;; will add the new entry as a child entry.

     (goto-char (point-min))
     (search-forward (concat "Links " (format-time-string "%Y-W%W"))))

   (add-to-list 'org-capture-templates
                  `("l" "Linkk" entry (function org-journal-find-bookmark)
                         "* %?\n  %i\n  From: %a" :empty-lines 1))
 #+end_src
*** Note
#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
                   '("n" "Note"  entry
                     (file+headline nc/inbox-file "Notes")
                     "* %(org-insert-time-stamp nil nil t) %?\n  %i \n  See: %a" :empty-lines 1))
#+end_src
*** Book
#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
                   '("b" "Book"  entry
                     (file+headline nc/reading-file "Inbox")
                     "* NEXT %^{Title}\n:PROPERTIES:\n:author: %^{Author}\n:name: %^{Title}\n:END:\n\n%i\n\n" :empty-lines 1))
#+end_src
*** Interruption task
 #+begin_src emacs-lisp
   (add-to-list 'org-capture-templates
                `("i" "Interrupting task" entry
                  (function org-journal-find-location)
                  "* %^{Task}"
                  :clock-in t :clock-resume t))
 #+end_src


 #+begin_src emacs-lisp
   (defun my/capture-interruption-task ()
       "Interrupted Task"
       (interactive)
       (org-capture 4 "i"))

   ;; Override the key definition
   (global-set-key (kbd "<f9>") 'my/capture-interruption-task)
 #+end_src
*** New project
I have my own template for creating new projects

#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
                     `("p" "New Project" entry (file nc/org-default-projects-file)
               (file "~/notes/templates/newproject.org")))
#+end_src

*** Daily Review

 #+begin_src emacs-lisp
   (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (nc/goto-journal-file)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.

    (goto-char (point-min)))

   (add-to-list 'org-capture-templates
                  `("d" "Review: Daily Review" entry (function org-journal-find-location)
                    (file "~/notes/templates/dailyreview.org")
                    :clock-in t :clock-resume t))
 #+end_src


 #+begin_src emacs-lisp
   (defun nc/org-insert-daily-review ()
     "Insert daily review in org file"
     (interactive)
     (progn
       (org-capture nil "d")
       (org-capture-finalize t)
       (org-narrow-to-subtree)
       (org-clock-in)))

   (bind-key "oD" 'nc/org-insert-daily-review nc-map)
 #+end_src
*** WeeklyReview
 #+begin_src emacs-lisp
 (add-to-list 'org-capture-templates
                  `("w" "WeeklyReview" entry (file+datetree+prompt nc/weekly-review-file)
            "* Summary of the week :REVIEW:\n%[~/notes/templates/review.org]"))
 #+end_src

** Agenda
*** Agenda configuration
By default all files in GTD and journal folder will be in my agenda, to be searchable

Setting =org-agenda-file-regexp= to include all numeric files (journal files)

#+begin_src emacs-lisp
  (setq org-agenda-file-regexp "\\`[^.].*\\.org\\'\\|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$"
          org-agenda-files (list "~/notes/gtd.org" "~/notes/projects.org" "~/notes/someday.org" "~/notes/personal/calendar.org" "~/notes/journal/")
          org-agenda-span 'day
          org-agenda-start-on-weekday nil
          org-agenda-skip-deadline-if-done t
          org-agenda-skip-scheduled-if-done t
          org-agenda-start-with-log-mode t
          org-agenda-block-separator nil
          org-deadline-warning-days 5)
#+end_src

*** Diary
 #+begin_src emacs-lisp
   (setq diary-file "~/notes/diary"
         org-agenda-include-diary t)
 #+end_src
*** Custom Agenda commands
**** Function to skip headline tagged with =:project:=

 #+begin_src emacs-lisp
 (defun nc--org-agenda-skip-project ()
     (org-agenda-skip-entry-if 'regexp ":project:"))
 #+end_src

**** Display Header parent

 #+begin_src emacs-lisp
 (defun nc--org-agenda-format-parent (n)
   ;; (s-truncate n (org-format-outline-path (org-get-outline-path)))
   (save-excursion
     (save-restriction
       (widen)
       (org-up-heading-safe)
       (s-truncate n (org-get-heading t t)))))
 #+end_src
**** Agenda Commands

     #+begin_src emacs-lisp
       (defun org-current-is-todo ()
         (string= "NEXT" (org-get-todo-state)))

       (defun org-agenda-skip-all-siblings-but-first ()
         "Skip all but the first non-done entry."
         (let (should-skip-entry)
           (unless (org-current-is-todo)
             (setq should-skip-entry t))
           (save-excursion
             (while (and (not should-skip-entry) (org-goto-sibling t))
               (when (org-current-is-todo)
                 (setq should-skip-entry t))))
           (when should-skip-entry
             (or (outline-next-heading)
                 (goto-char (point-max))))))

       (require 'org-agenda)

       (setq org-agenda-custom-commands
             '(("," "Agenda"
                      ((agenda "" ((org-agenda-sorting-strategy '(timestamp-up time-up priority-down category-keep))))

                       (tags-todo "TODO=\"STARTED\"+|TODO=\"WAITING\""
                                  ((org-agenda-overriding-header "Started / waiting tasks")
                                   (org-agenda-prefix-format " %i %-25:c")
                                   ;;(org-agenda-prefix-format "%-27:(nc--org-agenda-format-parent 25)")
                                   (org-agenda-sorting-strategy '(priority-down todo-state-up category-keep))))
                       ;; (tags-todo "TODO=\"NEXT\"+@office-HOLD"
                       ;;            ((org-agenda-overriding-header "Next tasks @office")
                       ;;             (org-tags-exclude-from-inheritance '("project"))
                       ;;             (org-agenda-prefix-format "%-27:(nc--org-agenda-format-parent 25)")
                       ;;             ;; (org-agenda-skip-function
                       ;;             ;;  (quote
                       ;;             ;;   (org-agenda-skip-all-siblings-but-first)))
                       ;;             (org-agenda-sorting-strategy '(priority-down todo-state-up category-keep))
                       ;;             (org-agenda-todo-keyword-format "%-4s")))
                       (tags-todo "TODO=\"NEXT\""
                                  ((org-agenda-overriding-header "Next tasks")
                                   (org-agenda-prefix-format " %i %-25:c")
                                   (org-agenda-skip
                                    '(org-agenda-skip-if 'scheduled 'deadline))
                                   ;;(org-agenda-files '("~/_PIM/notes/gtd.org"))
                                   (org-agenda-sorting-strategy '(priority-down todo-state-up category-keep))))
                       )
                      nil)
               ("g" . "GTD contexts")
                  ("go" "Office" tags-todo "@office")
                  ("gc" "Computer" tags-todo "@computer")
                  ("ge" "Emacs" tags-todo "emacs")
                  ("gl" "Learning" tags-todo "learning")
                  ("gr" "Reading" tags-todo "@reading")
                   ;; exports block to this file with C-c a e
                 ;; ..other commands here
               ("p" "Projects" tags "project")
                  ))
     #+end_src
*** Recent open loops

 #+begin_src emacs-lisp
 (defun nc/org-agenda-recent-open-loops ()
     (interactive)
     (let ((org-agenda-start-with-log-mode t)
             (org-agenda-use-time-grid nil))
       ;; (fetch-calendar)
       (org-agenda-list nil (org-read-date nil nil "-2d") 4)))
 #+end_src

** Org Clock Configuration

Too many clock entries clutter up a heading.

#+begin_src emacs-lisp
  (use-package org
    :bind (("C-c C-x C-i" . nc/org-clock-in)
           ("C-c C-x C-o" . org-clock-out)
           ("<f11>" . org-clock-goto))
    :config
    (progn
      ;; Insinuate it everywhere
      (org-clock-persistence-insinuate)
      ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
      (setq org-clock-history-length 23
            ;; Resume clocking task on clock-in if the clock is open
            org-clock-in-resume t
            ;; Separate drawers for clocking and logs
            org-drawers '("PROPERTIES" "CLOCK" "LOGBOOK" "RESULTS" "HIDDEN")
            ;; Save clock data and state changes and notes in the LOGBOOK drawer
            org-clock-into-drawer t
            ;; Sometimes I change tasks I'm clocking quickly -
            ;; this removes clocked tasks with 0:00 duration
            org-clock-out-remove-zero-time-clocks t
            ;; Clock out when moving task to a done state
            org-clock-out-when-done t
            ;; Save the running clock and all clock history when exiting Emacs, load it on startup
            org-clock-persist t
            ;; Prompt to resume an active clock
            org-clock-persist-query-resume t
            ;; Enable auto clock resolution for finding open clocks
            org-clock-auto-clock-resolution #'when-no-clock-is-running
            ;; Include current clocking task in clock reports
            org-clock-report-include-clocking-task t)))
#+end_src

Fix timereport indentation

#+begin_src emacs-lisp
(defun nc--org-clocktable-indent-string (level)
  (if (= level 1)
      ""
    (let ((str "\\"))
      (while (> level 2)
        (setq level (1- level)
              str (concat str "_")))
      (concat str "_ "))))

(advice-add 'org-clocktable-indent-string :override #'nc--org-clocktable-indent-string)
#+end_src


** Refiling
Targets include this file and any file contributing to the agenda - up to 2 levels deep
 #+begin_src emacs-lisp
   (setq org-refile-targets (append '((org-default-notes-file :level . 2))
                                    '((nc/org-default-tasks-file :level . 1)
                                      (nc/org-default-projects-file :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
                                      (nc/org-default-someday-file :level . 0)
                                      (nil :maxlevel . 3)))) ;; current file

   (setq org-blank-before-new-entry nil)
 #+end_src

 Exclude completed tasks from refile targets.

 #+begin_src emacs-lisp
   (defun nc--verify-refile-target ()
     "Exclude todo keywords with a done state from refile targets"
     (not (member (nth 2 (org-heading-components)) org-done-keywords)))

   (setq org-refile-target-verify-function 'nc--verify-refile-target)
 #+end_src


 Listing filenames and headings in targets and do not complete in steps, helm will listing filenames & headings.

 #+begin_src emacs-lisp
 (setq org-refile-use-outline-path 'file)
 (setq org-outline-path-complete-in-steps nil)
 #+end_src

 Allow creating parent nodes

 #+begin_src emacs-lisp
 (setq org-refile-allow-creating-parent-nodes 'confirm)
 #+end_src
** Refiling a subtree to a new file

Adapted from GTD Boxes https://gitlab.com/howardabrams/spacemacs.d/-/blob/master/elisp/boxes-extras.el
Documentation : http://www.howardism.org/Technical/Emacs/getting-more-boxes-done.html


#+begin_src emacs-lisp
  (defun nc--org-subtree-metadata ()
    "Return a list of key aspects of an org-subtree. Includes the
  following: header text, body contents, list of tags, region list
  of the start and end of the subtree."
    (save-excursion
      ;; Jump to the parent header if not already on a header
      (when (not (org-at-heading-p))
        (org-previous-visible-heading 1))

      (let* ((context (org-element-context))
             (attrs   (cl-second context))
             (props   (org-entry-properties)))

        (list :region     (list (plist-get attrs :begin) (plist-get attrs :end))
              :header     (plist-get attrs :raw-value) ; Use :raw-value because :title returns too more stuff
              :tags       (nc--org-get-subtree-tags props)
              :properties (nc--org-get-subtree-properties attrs)
              :body       (nc--org-get-subtree-content attrs)))))

  (defun nc--org-get-subtree-tags (&optional props)
    "Given the properties, PROPS, from a call to
  `org-entry-properties', return a list of tags."
    (unless props
       (setq props (org-entry-properties)))
    (let ((tag-label (if nc--org-get-subtree-tags-inherited "ALLTAGS" "TAGS")))
      (-some->> props
           (assoc tag-label)
           cdr
           substring-no-properties
           (s-split ":")
           (--filter (not (cl-equalp "" it))))))

  (defvar nc--org-get-subtree-tags-inherited t
    "Returns a subtree's tags, and all tags inherited (from tags
    specified in parents headlines or on the file itself). Defaults
    to true.")

  (defun nc--org-get-subtree-properties (attributes)
    "Return a list of tuples of a subtrees properties where the keys are strings."

    (defun symbol-upcase? (sym)
      (let ((case-fold-search nil))
        (string-match-p "^:[A-Z]+$" (symbol-name sym))))

    (defun convert-tuple (tup)
      (let ((key (cl-first tup))
            (val (cl-second tup)))
        (list (substring (symbol-name key) 1) val)))

    (->> attributes
         (-partition 2)                         ; Convert plist to list of tuples
         (--filter (symbol-upcase? (cl-first it))) ; Remove lowercase tuples
         (-map 'convert-tuple)))

  (defun nc--org-get-subtree-content (attributes)
    "Return the contents of the current subtree as a string."
    (let ((header-components '(clock diary-sexp drawer headline inlinetask
                               node-property planning property-drawer section)))

        (goto-char (plist-get attributes :contents-begin))

        ;; Walk down past the properties, etc.
        (while
            (let* ((cntx (org-element-context))
                   (elem (cl-first cntx))
                   (props (cl-second cntx)))
              (when (member elem header-components)
                (goto-char (plist-get props :end)))))

        ;; At this point, we are at the beginning of what we consider
        ;; the contents of the subtree, so we can return part of the buffer:
        (buffer-substring-no-properties (point) (org-end-of-subtree))))

  (defun nc/org-refile-subtree-to-file (dir)
    "Archive the org-mode subtree and create an entry in the
  directory folder specified by DIR. It attempts to move as many of
  the subtree's properties and other features to the new file."
    (interactive "DDestination: ")
    (let* ((props      (nc--org-subtree-metadata))
           (head       (plist-get props :header))
           (body       (plist-get props :body))
           (tags       (plist-get props :tags))
           (properties (plist-get props :properties))
           (area       (plist-get props :region))
           (filename   (nc--org-filename-from-title head))
           (filepath   (format "%s/%s.org" dir filename)))
      (apply #'delete-region area)
      (nc/org-create-org-file filepath head body tags properties)))

  (defun nc/org-create-org-file (filepath header body tags properties)
    "Create a new Org file by FILEPATH. The contents of the file is
  pre-populated with the HEADER, BODY and any associated TAGS."
    (find-file-other-window filepath)
    (nc--org-set-file-property "TITLE" header t)
    (when tags
      (nc--org-set-file-property "FILETAGS" (s-join " " tags)))

    ;; Insert any drawer properties as #+PROPERTY entries:
    (when properties
      (goto-char (point-min))
      (or (re-search-forward "^\s*$" nil t) (point-max))
      (--map (insert (format "#+property: %s %s\n" (cl-first it) (cl-second it))) properties))

    ;; My auto-insert often adds an initial headline for a subtree, and in this
    ;; case, I don't want that... Yeah, this isn't really globally applicable,
    ;; but it shouldn't cause a problem for others.
    (when (re-search-forward "^\\* [0-9]$" nil t)
      (replace-match ""))

    (delete-blank-lines)
    (goto-char (point-max))
    (insert "\n")
    (insert "* " header)
    (insert "\n")
    (insert body))

  (defun nc--org-filename-from-title (title)
    "Creates a useful filename based on a header string, TITLE.
  For instance, given the string:    What's all this then?
       This function will return:    whats-all-this-then"
    (let* ((no-letters (rx (one-or-more (not alphanumeric))))
           (init-try (->> title
                          downcase
                          (replace-regexp-in-string "'" "")
                          (replace-regexp-in-string no-letters "-"))))
      (string-trim init-try "-+" "-+")))

  (defun nc--org-set-file-property (key value &optional spot)
    "Make sure file contains a top-level, file-wide property.
  KEY is something like `TITLE' or `FILETAGS'. This function makes
  sure that the property contains the contents of VALUE, and if the
  file doesn't have the property, it is inserted at either SPOT, or
  if nil,the top of the file."
    (save-excursion
      (goto-char (point-min))
      (let ((case-fold-search t))
        (if (re-search-forward (format "^#\\+%s:\s*\\(.*\\)" key) nil t)
            (replace-match value nil nil nil 1)

          (cond
           ;; if SPOT is a number, go to it:
           ((numberp spot) (goto-char spot))
           ;; If SPOT is not given, jump to first blank line:
           ((null spot) (progn (goto-char (point-min))
                               (re-search-forward "^\s*$" nil t)))
           (t (goto-char (point-min))))

          (insert (format "#+%s: %s\n" (upcase key) value))))))


  (bind-key "or" 'nc/org-refile-subtree-to-file nc-map)
#+end_src

** Speed commands
 From https://orgmode.org/worg/org-hacks.html
Customize speed-commands :
- N :: Show next entry keeping other entries closed
- P :: Show previous entry keeping previous entries closed
- m :: org-mark-subtree
- ! :: Jump to the end of the current node
  
 #+begin_src emacs-lisp
   (defun nc/org-show-next-heading-tidily ()
     "Show next entry, keeping other entries closed."
     (if (save-excursion (end-of-line) (outline-invisible-p))
         (progn (org-show-entry) (show-children))
       (outline-next-heading)
       (unless (and (bolp) (org-on-heading-p))
         (org-up-heading-safe)
         (hide-subtree)
         (error "Boundary reached"))
       (org-overview)
       (org-reveal t)
       (org-show-entry)
       (show-children)))

   (defun nc/org-show-previous-heading-tidily ()
     "Show previous entry, keeping other entries closed."
     (let ((pos (point)))
       (outline-previous-heading)
       (unless (and (< (point) pos) (bolp) (org-on-heading-p))
         (goto-char pos)
         (hide-subtree)
         (error "Boundary reached"))
       (org-overview)
       (org-reveal t)
       (org-show-entry)
       (show-children)))

   ;; Improve speed command behavior
   (setq org-use-speed-commands
          (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))

   (push '("N" nc/org-show-next-heading-tidily) org-speed-commands)
   (push '("P" nc/org-show-previous-heading-tidily) org-speed-commands)
   (push '("m" org-mark-subtree) org-speed-commands)


   (add-to-list
    'org-speed-commands
    '("!" .
      (progn
        (outline-show-subtree)
        (org-end-of-subtree))))

   (defun nc/org-go-speed ()
     "Goes to the beginning of an element's header, so that you can execute speed commands."
     (interactive)
     (when (equal major-mode 'org-mode)
       (if (org-at-heading-p)
           (beginning-of-line)
         (outline-previous-heading))))

   (bind-key "C-< C-<" 'nc/org-go-speed org-mode-map)
   
 #+end_src

** Org Structure templates

#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

** Babel
*** Babel languages

#+begin_src emacs-lisp
  (use-package ob-restclient)

  (setq org-plantuml-jar-path
        (expand-file-name "~/opt/lib/plantuml.jar"))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (awk .t)
     (python . t)
     (calc . t)
     (js . t)
     (plantuml . t)
     (dot . t)
     (java .t)
     (restclient . t)))

  (require 'ob-clojure)
#+end_src

#+RESULTS:

*** Editing source code
 I don't want to get distracted by the same code in the other window, so I want org src to use the current window.

 #+begin_src emacs-lisp
   (setq org-src-window-setup 'current-window)
 #+end_src
*** Evaluate code blocks without prompting
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src
*** Syntax highlight in source blocks
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src
** My Org Mode Utilities Functions
*** Manipulate hours/minutes in tables
From https://orgmode.org/worg/org-hacks.html#org0d09b33
#+begin_src emacs-lisp
(defun nc--org-time-string-to-seconds (s)
  "Convert a string HH:MM:SS to a number of seconds."
  (cond
   ((and (stringp s)
         (string-match "\\([0-9]+\\):\\([0-9]+\\):\\([0-9]+\\)" s))
    (let ((hour (string-to-number (match-string 1 s)))
          (min (string-to-number (match-string 2 s)))
          (sec (string-to-number (match-string 3 s))))
      (+ (* hour 3600) (* min 60) sec)))
   ((and (stringp s)
         (string-match "\\([0-9]+\\):\\([0-9]+\\)" s))
    (let ((min (string-to-number (match-string 1 s)))
          (sec (string-to-number (match-string 2 s))))
      (+ (* min 60) sec)))
   ((stringp s) (string-to-number s))
   (t s)))

(defun nc--org-time-seconds-to-string (secs)
  "Convert a number of seconds to a time string."
  (cond ((>= secs 3600) (format-seconds "%h:%.2m:%.2s" secs))
        ((>= secs 60) (format-seconds "%m:%.2s" secs))
        (t (format-seconds "%s" secs))))

(defmacro nc/with-time (time-output-p &rest exprs)
  "Evaluate an org-table formula, converting all fields that look
like time data to integer seconds.  If TIME-OUTPUT-P then return
the result as a time value."
  (list
   (if time-output-p 'nc--org-time-seconds-to-string 'identity)
   (cons 'progn
         (mapcar
          (lambda (expr)
            `,(cons (car expr)
                    (mapcar
                     (lambda (el)
                       (if (listp el)
                           (list 'with-time nil el)
                         (nc--org-time-string-to-seconds el)))
                     (cdr expr))))
          `,@exprs))))
#+end_src

*** Attachments folder
I'm not a big fan of =org-attachments= so I prefer to store all my
attachements in a subfolder *assets/buffer-name-sans-extension* that
correspond to current buffer I'm editing.

#+begin_src emacs-lisp
  (defun nc/create-buffer-attachment-directory ()
      "Create assets directory for org mode file"
    (interactive)
    (let ((assets-buffer-dir (file-name-sans-extension (buffer-name) )))
      (f-mkdir "assets" assets-buffer-dir)
      (message "Creation %s folder for current folder" assets-buffer-dir)))
#+end_src

*** Translate capital keywords to lowercase
From : https://github.com/tecosaur/emacs-config/blob/master/config.org#translate-capital-keywords-old-to-lower-case-new

#+begin_src emacs-lisp
  (defun nc/org-syntax-convert-keyword-case-to-lower ()
    "Convert all #+KEYWORDS to #+keywords."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((count 0)
            (case-fold-search nil))
        (while (re-search-forward "^[ \t]*#\\+[A-Z_]+" nil t)
          (unless (s-matches-p "RESULTS" (match-string 0))
            (replace-match (downcase (match-string 0)) t)
            (setq count (1+ count))))
        (message "Replaced %d occurences" count))))
#+end_src
** Deft 

[[https://github.com/jrblevin/deft][Deft]] is an emacs mode for quickly searching (or editing) in his directory notes.

#+begin_src emacs-lisp
  (use-package deft
    :bind
    (("C-c n d" . deft))
    :config
    (setq deft-directory "~/notes"
          deft-recursive t
          deft-extensions '("org")
          deft-default-extension "org"
          deft-text-mode 'org-mode
          deft-org-mode-title-prefix t
          deft-use-filter-string-for-filename t
          deft-auto-save-interval 0
          deft-recursive-ignore-dir-regexp
          (concat "\\(?:"
                  "\\."
                  "\\|\\.\\."
                  "\\\|valtech"
                  "\\|journal"
                  "\\)$")
          deft-file-naming-rules
          '((noslash . "-")
            (nospace . "-")
            (case-fn . downcase)))

    ;; With Org-roam V2, we need to adapt Deft Title
    ;; Cf https://github.com/jrblevin/deft/issues/75#issuecomment-905031872
    (defun nc/deft-parse-title (file contents)
      "Parse the given FILE and CONTENTS and determine the title.
    If `deft-use-filename-as-title' is nil, the title is taken to
    be the first non-empty line of the FILE.  Else the base name of the FILE is
    used as title."
      (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
        (if begin
            (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
          (deft-base-filename file))))

    (advice-add 'deft-parse-title :override #'nc/deft-parse-title))
#+end_src

** Yankpad

[[https://github.com/Kungsgeten/yankpad][Yankpad]] paste snippets from an org-mode file.

#+begin_src emacs-lisp
  (use-package yankpad    
    :init
    (setq yankpad-file (concat org-directory "/templates/yankpad.org"))
    :config
    ;; If you want to complete snippets using company-mode
    ;; (add-to-list 'company-backends 'company-yankpad)
    ;; If you want to expand snippets with hippie-expand
    (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand)

    :bind
    (:map nc-map ("C-y". yankpad-insert)))

#+end_src
** Org Roam

#+begin_src emacs-lisp

  ;; (when is-windows  
  ;;   (add-to-list 'exec-path "C:/ProgramJava/tools/sqlite-tools-win32-x86-3340100"))

  (use-package org-roam
    :after org
    :custom
    (org-roam-directory (concat org-directory "/slipbox"))
    :init
    (setq org-roam-v2-ack t)
    :bind
    ("C-c n l" . org-roam-buffer-toggle)
    ("C-c n f" . org-roam-node-find)
    ("C-c n r" . org-roam-node-random)
    (:map org-mode-map
          (("C-c n i" . org-roam-node-insert)))
    :config

    (setq org-roam-capture-templates '(("d" "default" plain "%?"
                                        :if-new
                                        (file+head "%<%Y-%m-%d--%H-%M>--${slug}.org"
                                                   "#+title: ${title}\n#+date: %u\n\n")
                                        :unnarrowed t
                                        :immediate-finish t))
          )
    ;; this sets up various file handling hooks so your DB remains up to date
    (org-roam-setup))

#+end_src
* Programming
:properties:
:header-args+: :tangle "./lisp/setup-programming.el"
:end:

Programming configuration module automatically tangled in =./lisp/setup-programming.el=
#+begin_src emacs-lisp :noweb yes
  ;;; setup-programming.el --- Programming configuration module -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src

** LSP Mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :bind-keymap ("C-< l" . lsp-command-map)
    :hook (lsp-mode . (lambda ()
                        (let ((lsp-keymap-prefix "C-< l"))
                          (lsp-enable-which-key-integration))))
    :config
    (setq ; recommended
          gc-cons-threshold (* 100 1024 1024)
          read-process-output-max (* 1024 1024))

    (setq ; optional
          ;; lsp-clojure-custom-server-command '("/Users/nchapon/_PIM/tmp/2del/clojure-lsp") 

          ; Features
          lsp-lens-enable t
          lsp-semantic-tokens-enable t

          ;; Conflicts with other Clojure emacs packages
          cljr-add-ns-to-blank-clj-files nil ; disable clj-refactor adding ns to blank files
          cider-eldoc-display-for-symbol-at-point nil ; disable cider eldoc integration
          ; lsp-eldoc-enable-hover nil ; disable lsp-mode showing eldoc during symbol at point
          ; lsp-enable-indentation nil ; uncomment to use cider indentation instead of lsp
          ; lsp-enable-completion-at-point nil ; uncomment to use cider completion instead of lsp
          ))

  ;; optionally
  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-position 'top
          lsp-ui-doc-alignment 'window))

  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

This function adds the hooks that will enable LSP-powered formatting
and import organizing when saving a file with code.

#+begin_src elisp
  (defun lsp-save-hooks () "Install save hooks for lsp."
         (add-hook 'before-save-hook #'lsp-format-buffer t t)
         (add-hook 'before-save-hook #'lsp-organize-imports t t))
#+end_src

** Parenthesis
*** Smart Parens
Smart parens for all programming modes with paredit bindings.

#+begin_src emacs-lisp
  (use-package smartparens
    :defer t
    :diminish ""
    :hook (((clojure-mode
             emacs-lisp-mode
             common-lisp-mode
             scheme-mode
             lisp-mode
             cider-repl-mode
             inferior-lisp-mode
             inferior-emacs-lisp-mode)
            . smartparens-strict-mode)
           (prog-mode . smartparens-mode))

    :bind (:map smartparens-mode-map
                ("C-M-q" . sp-indent-defun)
                :map smartparens-strict-mode-map
                (";" . sp-comment))

    :config
    (require 'smartparens-config)
    (sp-use-paredit-bindings)
    (define-key smartparens-mode-map (kbd "M-r") 'sp-rewrap-sexp) ; needs to be set manually, because :bind section runs before config
    (setq smartparens-strict-mode t)
    (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p))

    (defun nc--create-newline-and-enter-sexp (&rest _ignored)
      "Open a new brace or bracket expression, with relevant newlines and indent. "
      (newline)
      (indent-according-to-mode)
      (forward-line -1)
      (indent-according-to-mode))

    (sp-with-modes '(c-mode c++-mode js-mode js2-mode java-mode
                            typescript-mode perl-mode)
      (sp-local-pair "{" nil :post-handlers
                     '((nc--create-newline-and-enter-sexp "RET")))))

#+end_src

*** Show Paren Mode
Emacs builtin show paren mode.
#+begin_src emacs-lisp
  (use-package paren
    :straight nil
    :hook (prog-mode . show-paren-mode)
    :custom
    (show-paren-delay 0)
    (show-paren-when-point-in-periphery t))
#+end_src



** Clojure
*** clojure-mode
#+begin_src emacs-lisp
  (use-package clojure-mode
    :hook
    ((clojure-mode . lsp)
     (clojurec-mode . lsp)
     (clojurescript-mode . lsp)
     (clojure-mode . lsp-save-hooks))
    :init
    (setq clojure-align-forms-automatically t))
#+end_src
*** Cider
#+begin_src emacs-lisp
  (use-package cider
    :init
    (setq org-babel-clojure-backend 'cider))
#+end_src

** Docker
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile.*\\'")
#+end_src
** Lua
#+begin_src emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'")
#+end_src
** Markdown

GitHub Flavored Markdown by default for README.md files.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'"       . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :config

    (setq markdown-fontify-code-blocks-natively t)
  
    ;; Process Markdown with Pandoc, using GitHub stylesheet for nice output
    (let ((stylesheet (expand-file-name
                       (locate-user-emacs-file "etc/pandoc.css"))))
      (setq markdown-command
            (mapconcat #'shell-quote-argument
                       `("pandoc" "--toc" "--section-divs"
                         "--css" ,(concat "file://" stylesheet)
                         "--standalone" "-f" "markdown" "-t" "html5")
                       " "))))


  (use-package markdown-toc
    :after markdown-mode)

#+end_src
** Python
#+begin_src emacs-lisp
(use-package python-mode
  :straight nil
  :mode ("\\.py\\'")
  :custom
  (python-shell-interpreter "python3"))

#+end_src
** Web
*** Rest Client
[[https://github.com/pashky/restclient.el][Restclient]] Emacs client for testing API

#+begin_src emacs-lisp
(use-package restclient
  :mode (("\\.restclient\\'" . restclient-mode)
         ("\\.http\\'" . restclient-mode)))
#+end_src
*** Web Mode
[[https://web-mode.org/][Web Mode]] major mode for editing HTML pages

#+begin_src emacs-lisp
(use-package web-mode
  :mode (("\\.html\\'" . web-mode)
         ("\\.hbs\\'" . web-mode)
         ("\\.tag$" . web-mode)
         ("\\.ftl$" . web-mode)
         ("\\.jsp$" . web-mode)
         ("\\.php$" . web-mode))
  :config
  (add-hook 'web-mode-hook (lambda ()
                             (setq web-mode-markup-indent-offset 4)
                             (setq web-mode-code-indent-offset 4))))

#+end_src

*** Javascript
[[https://github.com/mooz/js2-mode][JS2 mode]] improved javascript editing mode
#+begin_src emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :init
  (defalias 'javascript-generic-mode 'js2-mode)
  :config
  (js2-imenu-extras-setup)
  (setq-default js-auto-indent-flag nil
                js2-strict-missing-semi-warning nil
                js-indent-level 2)

  ;; Don't override global M-j keybinding (join lines)
  (define-key js2-mode-map (kbd "M-j") nil))

#+end_src


** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode (("\\.yaml\\'" . yaml-mode)
             ("\\.yml\\'" . yaml-mode))
    :custom
    (yaml-indent-offset 4))
#+end_src


* Shell
:properties:
:header-args+: :tangle "./lisp/setup-shell.el"
:end:

Shell configuration module automatically tangled in =./lisp/setup-shell.el=
#+begin_src emacs-lisp :noweb yes
  ;;; setup-shell.el --- Shell configuration module -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src


** vterm 

Last emacs terminal emulator :  https://github.com/akermu/emacs-libvterm

[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the Vterm buffer and the current editing buffer 

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :custom
    (vterm-disable-bold-font t)
    (vterm-disable-inverse-video nil)
    (vterm-disable-underline nil)
    (vterm-kill-buffer-on-exit t)
    (vterm-max-scrollback 9999)
    (vterm-shell "/bin/zsh")
    (vterm-term-environment-variable "xterm-256color"))

  (use-package vterm-toggle
    :custom
    ;; Show Vterm Buffer in bottom side
    (vterm-toggle-fullscreen-p nil)
    :init
    (add-to-list 'display-buffer-alist
                 '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   (display-buffer-reuse-window display-buffer-in-side-window)
                   (side . bottom)
                   (dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3)))
    :bind
    (:map nc-map
          ("$" . vterm-toggle)
          :map vterm-mode-map
          ("C-<return>" . vterm-toggle-insert-cd)
          ("C-S-n" . vterm-toggle-forward)
          ("C-S-p" . vterm-toggle-backward)
          ))
#+end_src

** aweshell

[[https://github.com/manateelazycat/aweshell][aweshell]] Awesome eshell (eshell extensions)

#+begin_src emacs-lisp
  (use-package aweshell
    :straight (aweshell
               :type git
               :host github
               :repo "manateelazycat/aweshell")
    :custom
    (eshell-highlight-prompt nil)
    (eshell-prompt-function 'epe-theme-dakrone)

    :bind
    (:map nc-map
          ("C-e" . aweshell-dedicated-toggle)))
#+end_src
* Custom Functions
:properties:
:header-args+: :tangle "./lisp/setup-functions.el"
:end:

Custom functions module automatically tangled in =./lisp/setup-functions.el=
#+begin_src emacs-lisp :noweb yes
  ;;; setup-functions.el --- Custom functions module -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  <<nc-header>>
#+end_src

** Emacs Config File

 #+begin_src emacs-lisp
   (defun nc/goto-emacs-config ()
       "Edit Readme.org"
       (interactive)
       (find-file "~/.emacs.d/Readme.org"))     
 #+end_src

** My personal credentials

#+begin_src emacs-lisp
    (defun nc/goto-my-credentials ()
      "Goto my credentials"
      (interactive)
      ;; before disable super-save-mode
      ;;(super-save-stop)
      (find-file (concat nc/org-default-personal-dir "/password.gpg")))

  (bind-key "gp" 'nc/goto-my-credentials nc-map)
#+end_src


** Pseudo uuid

Generate a 32 random pseudo uuid

#+begin_src emacs-lisp
  (defun nc--random-alnum ()
    (let* ((alnum "abcdef0123456789")
           (i (% (abs (random)) (length alnum))))
      (substring alnum i (1+ i))))

  (defun nc/uuid ()
    "Generate a pseudo UUID"
    (interactive)
    (dotimes (i 32) (insert (nc--random-alnum))))

  (bind-key "iu" 'nc/uuid nc-map)
#+end_src


** Password generator
Generates a strong password

 #+begin_src emacs-lisp
   (defun nc--random-char ()
       (let* ((alnum "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-/%+*?&#[]()={}_<>!$,;:^µ0123456789")
              (i (% (abs (random)) (length alnum))))
         (substring alnum i (1+ i))))


   (defun nc/generate-password ()
       "Generates a strong password"
       (interactive)
       (dotimes (i 12) (insert (nc--random-char))))

   (bind-key "ip" 'nc/generate-password nc-map)
 #+end_src

** TimeSlot
Insert time slot mainly used when I schedule meeting or appointment.
#+begin_src emacs-lisp
  (defvar current-hour-format "%H:00")

  (defun nc/insert-time-slot ()
    "Insert Time Slot"
    (interactive)
    (let ((begin (format-time-string current-hour-format (current-time)))
          (end (format-time-string current-hour-format (time-add (current-time) (seconds-to-time 3600)))))
      (insert (concat begin "-" end))))

  (bind-key "it" 'nc/insert-time-slot nc-map)

#+end_src

** Inserting time stamps
   From : https://github.com/novoid/dot-emacs/blob/master/config.org#inserting-time-stamps--my-map-ddtt

#+begin_src emacs-lisp
  (defun nc/insert-datestamp()
    "Insert the current date in yyyy-mm-dd format."
    (interactive "*")
    (if (eq major-mode 'org-mode)
        (progn
          (org-insert-time-stamp nil nil nil)
          (insert " "))
        (insert (format-time-string "%Y-%m-%d" (current-time)))))

  (bind-key "id" 'nc/insert-datestamp nc-map)
 #+end_src


 #+begin_src emacs-lisp
   (defun nc/insert-datestamp-inactive()
     "Insert the current date in yyyy-mm-dd format."
     (interactive "*")
     (if (eq major-mode 'org-mode)
         (progn
       (org-insert-time-stamp nil nil t)
       (insert " "))
       (insert (format-time-string "%Y-%m-%d" (current-time)))))

   (bind-key "iD" 'nc/insert-datestamp-inactive nc-map)
 #+end_src

** Searching in my notes

#+begin_src emacs-lisp
  (defun nc/search-notes ()
    "Search in all my org notes"
    (interactive)
    (consult-ripgrep org-directory ""))

  (bind-key "sn" 'nc/search-notes nc-map)
#+end_src

** Sudo Edit File

From : https://karthinks.com/software/fifteen-ways-to-use-embark/

#+begin_src emacs-lisp
      (defun nc/sudo-find-file (file)
        "Open FILE as root."
        (interactive "FOpen file as root: ")
        (when (file-writable-p file)
          (user-error "File is user writeable, aborting sudo"))
        (find-file (if (file-remote-p file)
                       (concat "/" (file-remote-p file 'method) ":"
                               (file-remote-p file 'user) "@" (file-remote-p file 'host)
                               "|sudo:root@"
                               (file-remote-p file 'host) ":" (file-remote-p file 'localname))
                     (concat "/sudo:root@localhost:" file))))
#+end_src
* Provided modules

** =setup-prefs= module
#+begin_src emacs-lisp :tangle ./lisp/setup-prefs.el
  (provide 'setup-prefs)
  ;;; setup-prefs.el ends here
#+end_src


** =setup-ui= module
#+begin_src emacs-lisp :tangle ./lisp/setup-ui.el
  (provide 'setup-ui)
  ;;; setup-ui.el ends here
#+end_src


** =setup-keys= module
#+begin_src emacs-lisp :tangle ./lisp/setup-keys.el
  (provide 'setup-keys)
  ;;; setup-keys.el ends here
#+end_src

** =setup-windows= module
#+begin_src emacs-lisp :tangle ./lisp/setup-windows.el
  (provide 'setup-windows)
  ;;; setup-windows.el ends here
#+end_src



** =setup-core= module
#+begin_src emacs-lisp :tangle ./lisp/setup-core.el
  (provide 'setup-core)
  ;;; setup-core.el ends here
#+end_src
** =setup-completion= module
#+begin_src emacs-lisp :tangle ./lisp/setup-completion.el
  (provide 'setup-completion)
  ;;; setup-completion.el ends here
#+end_src


** =setup-org= module
#+begin_src emacs-lisp :tangle ./lisp/setup-org.el
  (provide 'setup-org)
  ;;; setup-org.el ends here
#+end_src

** =nc-programming= module
#+begin_src emacs-lisp :tangle ./lisp/setup-programming.el
  (provide 'setup-programming)
  ;;; setup-programming.el ends here
#+end_src


** =setup-shell= module
#+begin_src emacs-lisp :tangle ./lisp/setup-shell.el
  (provide 'setup-shell)
  ;;; setup-shell.el ends here
#+end_src

** =setup-functions= module
#+begin_src emacs-lisp :tangle ./lisp/setup-functions.el
  (provide 'setup-functions)
  ;;; setup-functions.el ends here
#+end_src


# Local Variables:
# eval: (add-hook 'after-save-hook #'org-babel-tangle nil t)
# End:
