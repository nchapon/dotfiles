#+title: Emacs configuration with Org Mode
#+author: Andrey Listopadov
#+email: andreyorst@gmail.com
#+startup: noinlineimages
#+property: header-args :results silent

* About this document
This is a GNU Emacs configuration file, written as an Org document.
As a result =init.el= and =early-init.el= files are created, located in the same directory as this file, as well as some other files across the system.
You can review which files are created by searching for =:tangle= entries in this document.
Both =init.el= and =early-init.el= are in read only mode by default, and only this file is meant for editing, and the changes are automatically tangled on save.

* Early Init
:properties:
:header-args+: :tangle "./early-init.el"
:end:
Emacs 27 introduced new initialization file called =early-init.el=, which is executed before =init.el=.
It is meant to configure package initialization and early graphical interface tweaks, before actually drawing a window.

#+begin_src emacs-lisp
  ;;; early-init.el --- Early initialization -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  ;; Author: Nicolas CHAPON
  ;; Keywords: literate programming, Emacs configuration
  ;; Homepage:

  ;;; Commentary:
  ;; Emacs config.
  ;; This file was automatically generated by `org-babel-tangle'.
  ;; Do not change this file.  Main config is located in README.org at `user-emacs-directory'

  ;;; Code:
#+end_src

** Garbage Collection and Performance
One of the main reasons why Emacs startup time is big is that the garbage collection is invoked a lot, causing the increase of the startup time.
This can be migrated by setting high GC threshold and restoring it back in =after-init-hook=.

#+begin_src emacs-lisp
  (defvar nc--gc-cons-threshold gc-cons-threshold)
  (defvar nc--gc-cons-percentage gc-cons-percentage)
  (defvar nc--file-name-handler-alist file-name-handler-alist)

  (setq-default gc-cons-threshold 402653184
                gc-cons-percentage 0.6
                file-name-handler-alist nil)

  (defun nc/restore-defaults-after-init ()
    "Restore default values after initialization."
    (setq-default gc-cons-threshold nc--gc-cons-threshold
                  gc-cons-percentage nc--gc-cons-percentage
                  file-name-handler-alist nc--file-name-handler-alist))

  (add-hook 'after-init-hook #'nc/restore-defaults-after-init)

  (setq read-process-output-max (* 1024 1024 4) ; 4mb
        inhibit-compacting-font-caches t
        message-log-max 16384)
#+end_src

** Native Compiled Emacs Lisp
Emacs 28 can compile Emacs Lisp to native code.
These settings enable background asynchronous compilation, and dynamic reloading of compiled modules.

#+begin_src emacs-lisp
  (when (featurep 'native-compile)
    (setq native-comp-deferred-compilation t)
    (setq native-comp-async-report-warnings-errors nil))
#+end_src

** User Interface
This code sets default size of the frame and prevents the glimpse of unstyled Emacs by disabling some UI elements early.
Resizing frame is also expensive, and setting =x-gtk-resize-child-frames= variable to =resize-mode= is a workaround for the [[https://gitlab.gnome.org/GNOME/mutter/-/issues/840][issue]] with child frames not being resized correctly under Mutter.

#+begin_src emacs-lisp
  ;; (setq-default initial-frame-alist '((width . 170)
  ;;                                     (height . 56)
  ;;                                     (tool-bar-lines . 0)
  ;;                                     (bottom-divider-width . 0)
  ;;                                     (right-divider-width . 1))
  ;;               default-frame-alist initial-frame-alist
  ;;               frame-inhibit-implied-resize t
  ;;               x-gtk-resize-child-frames 'resize-mode
  ;;               fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
#+end_src

** Straight
Straight is an alternative way to manage package installations.
It can install packages from Git repositories listed on ELPA, MELPA, and directly from Git URLs.

#+begin_src emacs-lisp
  (defvar straight-process-buffer)
  (setq-default straight-process-buffer " *straight-process*")

  (defvar straight-build-dir)
  (setq straight-build-dir (format "build-%s" emacs-version))

  (defvar bootstrap-version)
  (let ((bootstrap-file
     (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
       'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Early =package.el= settings
=package.el= initialization is expensive, thus should be disabled before loading main init file:

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

** Loading of elisp files
Prefer loading newer files to the byte-compiled ones that have older time-stamp when running non-interactively to prevent the use of stale byte-code.
Saves us a little IO time to skip the mtime checks on every =*.elc= file.

#+begin_src emacs-lisp
  (setq load-prefer-newer noninteractive)
#+end_src

** =(provide 'early-init)=
This concludes the =early-init.el= file.

#+begin_src emacs-lisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* =init.el=
:properties:
:header-args+: :tangle "./init.el"
:end:
Main GNU Emacs init file.

#+begin_src emacs-lisp
  ;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

  ;; Author: Nicolas CHAPON
  ;; Keywords: literate programming, Emacs configuration
  ;; Homepage:

  ;;; Commentary:
  ;; Emacs config.
  ;; This file was automatically generated by `org-babel-tangle'.
  ;; Do not change this file.  Main config is located in README.org at `user-emacs-directory'

  ;;; Code:
#+end_src

** Loading =early-init.el= in Emacs 26 and earlier
When using pre Emacs 27 =eraly-init.el= must be loaded manually before anything from =init.el=.

#+begin_src emacs-lisp
  (unless (featurep 'early-init)
    (load (expand-file-name "early-init" user-emacs-directory)))
#+end_src

** Package Management
*** =use-package=
A macro for managing installed packages, and encapsulating their configurations.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (defvar straight-use-package-by-default)
  (setq straight-use-package-by-default t)
  (require 'use-package)
#+end_src
*** Diminish
Remove minor modes from mode line
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** Custom Preferences
My custom Emacs Preferences.
*** Personal Information
 #+begin_src emacs-lisp
 (setq user-full-name "Nicolas Chapon"
         user-mail-address "nchapon@gmail.com")
 #+end_src

*** Define constants

#+begin_src emacs-lisp
  (defconst is-mac (equal system-type 'darwin))
  (defconst is-linux (equal system-type 'gnu/linux))
  (defconst is-windows (equal system-type 'windows-nt))
  (defconst has-gui (display-graphic-p))
#+end_src
*** Customization File
To avoid overloading the GNU Emacs custormization =init.el= file made by the
user with the UI, I add the generated code in a separate file.

#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+end_src
*** Better Defaults
Small configs for better emacs experience...

#+begin_src emacs-lisp
  (setq initial-major-mode 'lisp-interaction-mode
        redisplay-dont-pause t
        column-number-mode t
        echo-keystrokes 0.02
        fill-column 80
        transient-mark-mode t
        shift-select-mode nil
        require-final-newline t
        truncate-partial-width-windows nil
        delete-by-moving-to-trash t
        confirm-nonexistent-file-or-buffer nil
        query-replace-highlight t
        ring-bell-function 'ignore)
 #+end_src

**** Transparently open compressed files
 #+begin_src emacs-lisp
 (auto-compression-mode t)
 #+end_src

**** Answering just 'y' or 'n'

 #+begin_src emacs-lisp
 (defalias 'yes-or-no-p 'y-or-n-p)
 #+end_src

**** Indentation & Tabs

 Always spaces with width of 4
 #+begin_src emacs-lisp
 (setq-default indent-tabs-mode nil)
 (setq-default tab-width 4)
 #+end_src
**** TODO Indent new line if necessary
Remove to bindings
#+begin_src emacs-lisp
 (define-key global-map (kbd "RET") 'newline-and-indent)
 #+end_src
*** UTF-8 Encoding

 Set all coding systems to utf-8
 #+begin_src emacs-lisp
 (prefer-coding-system 'utf-8-unix)
 (set-clipboard-coding-system 'utf-8-unix)
 (set-default-coding-systems 'utf-8-unix)
 (set-keyboard-coding-system 'utf-8-unix)
 (set-language-environment 'utf-8)
 (set-selection-coding-system 'utf-8-unix)
 (set-terminal-coding-system 'utf-8-unix)
 (setq locale-coding-system 'utf-8-unix)
 (setq coding-system-for-write 'utf-8-unix)
 (setq default-buffer-file-coding-system 'utf-8-unix)
 (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
 (setq file-name-coding-system  'utf-8)
 #+end_src
*** French Calendar & Holydays
 French Calendar & Holidays
 #+begin_src emacs-lisp
   (setq calendar-week-start-day 1
         calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                                  "Jeudi" "Vendredi" "Samedi"]
         calendar-month-name-array ["Janvier" "Fevrier" "Mars" "Avril" "Mai"
                                    "Juin" "Juillet" "Aout" "Septembre"
                                    "Octobre" "Novembre" "Decembre"])
 #+end_src

 #+begin_src emacs-lisp
   (defvar french-holiday
     '((holiday-fixed 1 1 "Jour de l'an")
       (holiday-fixed 5 1 "Fête du travail")
       (holiday-fixed 5 8 "Victoire 45")
       (holiday-fixed 7 14 "Fête nationale")
       (holiday-fixed 8 15 "Assomption")
       (holiday-fixed 11 1 "Toussaint")
       (holiday-fixed 11 11 "Armistice 18")
       (holiday-fixed 12 25 "Noël")
       (holiday-easter-etc 1 "Lundi de Pâques")
       (holiday-easter-etc 39 "Ascension")
       (holiday-easter-etc 50 "Lundi de Pentecôte")))

   (setq calendar-date-style 'european
         calendar-holidays french-holiday
         calendar-mark-holidays-flag t
         calendar-mark-diary-entries-flag t)

 #+end_src


** Mac OS Preferences
Some custom preferences dedicated to MacOS
*** Keys for apple keyboard
 #+begin_src emacs-lisp
   (when is-mac
     (setq mac-command-modifier 'meta)    ; make cmd key do Meta
     (setq mac-option-modifier 'super)    ; make opt key do Super
     (setq mac-control-modifier 'control) ; make Control key do Control
     (setq ns-function-modifier 'hyper)   ; make Fn key do Hyper
   )
 #+end_src
*** Mac right option
 This will allow you to use the right ~⌥~ key to write symbols ={[]}=. The left ~⌥~ key can be used as the Meta
 key.
 #+begin_src emacs-lisp
   (when is-mac
     (setq-default mac-right-option-modifier nil))
 #+end_src
*** GPG
 #+begin_src emacs-lisp
   (when is-mac
     (setf epa-pinentry-mode 'loopback))
 #+end_src
*** French Locale
 #+begin_src emacs-lisp
   (when is-mac
     (set-locale-environment "fr_FR.UTF-8"))
 #+end_src

** Global Functionnalities
*** No Littering

Help keeping =~/.emacs.d= clean.
[[https://github.com/emacscollective/no-littering][https://github.com/emacscollective/no-littering]]

#+begin_src emacs-lisp
(use-package no-littering)
#+end_src
*** Emacs Bindings
Emacs Global Bindings are redefined here.
#+begin_src emacs-lisp
    ;; Unbind unneeded keys
    (global-set-key (kbd "C-z") nil)
    (global-set-key (kbd "M-z") nil)
    (global-set-key (kbd "C-x C-z") nil)

    (global-set-key (kbd "C-+") #'text-scale-increase)
    (global-set-key (kbd "C--") #'text-scale-decrease)

    ;; Prefer backward-kill-word over Backspace
    (global-set-key (kbd "C-w") #'backward-kill-word)
    (global-set-key (kbd "C-x C-k") #'kill-region)

    (global-set-key (kbd "C-x C-r") #'recentf-open-files)

    ;; Move up/down paragraph
    (global-set-key (kbd "M-n") #'forward-paragraph)
    (global-set-key (kbd "M-p") #'backward-paragraph)

    ;; Goto Line
    ;;(global-set-key (kbd "M-g") #'goto-line)

    ;; Join Lines
    (global-set-key (kbd "M-j") (lambda () (interactive) (join-line -1)))

    ;; Functions
    (global-set-key (kbd "<f5>") #'revert-buffer)

#+end_src

*** Avy

#+begin_src emacs-lisp
(use-package avy
  :defer t
  :bind
  (("C-z c" . avy-goto-char-timer)
   ("C-z l" . avy-goto-line))
  :custom
  (avy-timeout-seconds 0.3)
  (avy-style 'pre)
  :custom-face
  (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))))
#+end_src

*** Crux
[[https://github.com/bbatsov/crux][Crux]] A Collection Of Ridiculosy Useful eXtensions for Emacs
#+begin_src emacs-lisp
  (use-package crux
    :bind
    (("C-a" . crux-move-beginning-of-line)
     ("C-c d" . crux-duplicate-current-line-or-region)
     ("C-x 4 t" . crux-transpose-windows)
     ("C-x K" . crux-kill-other-buffers)
     ("C-k" . crux-smart-kill-line))
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+end_src

*** Exec Path From Shell

[[https://github.com/purcell/exec-path-from-shell][Exec Path From Shell]] A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.

This happens a lot on OS X, where an Emacs instance started from the GUI inherits a default set of environment variables.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (progn
        (exec-path-from-shell-initialize)
        ;; (exec-path-from-shell-copy-env "GOPATH")
        ;;(exec-path-from-shell-copy-env "JAVA_HOME")
        ;; (exec-path-from-shell-copy-env "PATH")
        ;; (exec-path-from-shell-copy-env "RUST_SRC_PATH")
        )))
#+end_src

*** Dired
**** Dired
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :bind
    (("C-x C-j" . dired-jump))
    :custom
    ;; Always delete and copy recursively
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto refresh Dired, but be quiet about it
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Quickly copy/move file in Dired
    (dired-dwim-target t)
    ;; Move files to trash when deleting
    (delete-by-moving-to-trash t)
    ;; Load the newest version of a file
    (load-prefer-newer t)
    ;; Detect external file changes and auto refresh file
    (auto-revert-use-notify nil)
    (auto-revert-interval 3) ; Auto revert every 3 sec
    :config
    ;; Enable global auto-revert
    (global-auto-revert-mode t)
    ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
    (put 'dired-find-alternate-file 'disabled nil)

    ;; Using GNU ls on macOS instead of ls
    (if (executable-find "gls")
        (progn
          (setq insert-directory-program "gls")
          (setq dired-listing-switches "-lFaGh1v --group-directories-first"))
      (setq dired-listing-switches "-ahlF"))

    :hook
    (dired-mode . (lambda ()
                    (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                    (local-set-key (kbd "RET") #'dired-find-alternate-file)
                    (local-set-key (kbd "^")
                                   (lambda () (interactive) (find-alternate-file ".."))))))

#+end_src
**** Dired Narrow

[[https://github.com/Fuco1/dired-hacks/tree/7c0ef09d57a80068a11edc74c3568e5ead5cc15a#dired-narrow][Dired Narrow]] provides live filtering of files in dired buffers. In
general, after calling the respective narrowing function you type a
filter string into the minibuffer.

#+begin_src emacs-lisp
(use-package dired-narrow
  :ensure t
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
#+end_src

**** Font Lock Dired

[[https://github.com/purcell/diredfl][Diredfl]] Extra font lock rules for a  more colorful dired.

#+begin_src emacs-lisp
  (use-package diredfl
    :init (diredfl-global-mode 1))
#+end_src


*** Uniquify

Uniquify file path to ensure buffer name uniqueness

#+begin_src emacs-lisp
  (use-package uniquify
    :straight nil
    :custom
    (uniquify-buffer-name-style 'forward)
    (uniquify-separator "/")
    (uniquify-after-kill-buffer-p t)
    (uniquify-ignore-buffers-re "^\\*")
  )
#+end_src
*** Recent Files

 #+BEGIN_QUOTE
 Recentf is a minor mode that builds a list of recently opened
 files. This list is is automatically saved across sessions on exiting
 Emacs - you can then access this list through a command or the menu.

 [[https://www.emacswiki.org/emacs/RecentFiles][https://www.emacswiki.org/emacs/RecentFiles]]
 #+END_QUOTE

 #+begin_src emacs-lisp
   (use-package recentf
     :straight nil
     :custom
     (recentf-auto-cleanup "09:00am")
     (recentf-max-saved-items 300)
     (recentf-exclude '((expand-file-name package-user-dir)
                        ".cache"
                        ".cask"
                        ".elfeed"
                        "bookmarks"
                        "cache"
                        "ido.*"
                        "persp-confs"
                        "recentf"
                        "undo-tree-hist"
                        "url"
                        "COMMIT_EDITMSG\\'")))

   ;; When buffer is closed, saves the cursor location
   (save-place-mode 1)

   ;; Set history-length longer
   (setq-default history-length 500)

 #+end_src


*** Which Key

[[https://github.com/justbur/emacs-which-key][Which Key]] is a minor mode for Emacs that displays the key bindings following
your currently entered incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-mode))
#+end_src

** UI
*** All The Icons
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
*** Theme
Using moe theme dark all the day
#+begin_src emacs-lisp
  (use-package doom-themes

    :config

    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    (doom-themes-org-config)

    ;; or for treemacs users
    ;;(doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src
*** Mode line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-init))
#+end_src

*** Font
Use Input Font (http://input.fontbureau.com/)  on Linux, Monaco on MacOS

#+begin_src emacs-lisp
  (defun nc/setup-font ()
    "Set up font height"
    (interactive)
    (when is-linux
      (set-frame-font "Input Mono-12" nil t))
    (when is-mac
      (set-frame-font "Monaco 15" nil t))
    (when is-windows
      (set-frame-font "Consolas" nil t))
    )

  (when has-gui
    (add-hook 'after-init-hook #'nc/setup-font))
#+end_src

*** Windows configuration
**** No menu and toolbar

#+begin_src emacs-lisp
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

**** No welcome screen

#+begin_src emacs-lisp
(setq  inhibit-startup-message t)
#+end_src

*** Make fringe smaller

#+begin_src emacs-lisp
  (if (fboundp 'fringe-mode)
      (fringe-mode 2))
#+end_src
*** Completion System
Try the new Hype completion System
- Selectrum
- Consult
- Embark

**** Selectrum

#+begin_src emacs-lisp

  (use-package selectrum
    :init (selectrum-mode +1))
  (use-package prescient
    :config (prescient-persist-mode +1))
  (use-package selectrum-prescient
    :init (selectrum-prescient-mode +1) :after selectrum)

#+end_src
**** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :bind (:map minibuffer-local-map
                ("C-M-a" . marginalia-cycle))
    :init
    (marginalia-mode)
    (advice-add #'marginalia-cycle :after
                (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))
    (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src



**** Consult

     [[https://github.com/minad/consult][Consult]] Consulting completion Read

#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s F" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         :map isearch-mode-map
         ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

  ;; Enable automatic preview at point in the *Completions* buffer.
  ;; This is relevant when you use the default completion UI,
  ;; and not necessary for Vertico, Selectrum, etc.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Optionally replace `completing-read-multiple' with an enhanced version.
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-file consult--source-project-file consult--source-bookmark
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; Optionally configure a function which returns the project root directory.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (project-roots)
  (setq consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project)))))
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-root-function #'projectile-project-root)
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-root-function #'vc-root-dir)
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
)

#+end_src
**** Embark

[[https://github.com/oantolin/embark][Embark]] Emacs Minibuffer Actions Rooted in Key Maps

#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** General Programming
*** Magit

#+BEGIN_QUOTE
Magit a git porcelain inside Emacs !

[[https://github.com/magit/magit]]
#+END_QUOTE

#+begin_src emacs-lisp
  (use-package magit

    :init
    (when (getenv "GIT_EXECUTABLE")
      (setq magit-git-executable (getenv "GIT_EXECUTABLE")))

    :bind (("C-x g" . magit-status)
           ("<f6>" . magit-status )
           ("C-<f6>" . magit-log-buffer-file)))
#+end_src


*** Ediff

 From : [[https://www.emacswiki.org/emacs/EdiffMode]]

 You can ignore whitespace or case sensitivity in two ways:
- Interactively, on the fly:
   - Whitespace sensitivity – Toggle with =##= (=ediff-toggle-skip-similar=).
   - Case sensitivity – Toggle with =#c= (=ediff-toggle-ignore-case=). This assumes that you’ve loaded library Lisp:ediff+.el and that you are using `diff(1)’ as ‘ediff-diff-program’. (Toggling case-sensitivity is available in vanilla GNU Emacs 22, so Lisp:ediff+.el is mainly useful for older Emacs versions.)
 - Persistently: Customize option =ediff-diff-options=. This assumes that you are using `diff(1)’ as ‘ediff-diff-program’.
    - Whitespace insensitivity – Include ‘-w’ in =ediff-diff-options=.
    - Case insensitivity – Include ‘-i’ in =ediff-diff-options=.

#+begin_src emacs-lisp
  (use-package ediff
    :straight nil
    :custom
     ;; Ediff should be opened in selected frame and split window horizontally
    (ediff-window-setup-function 'ediff-setup-windows-plain)
    (ediff-split-window-function 'split-window-horizontally)
    (ediff-diff-options "-w")
    :config
    ;; Pour éviter des ouvertures de frames intempestives
    (advice-add 'ediff-window-display-p :override 'ignore))
#+end_src


*** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] Project interaction library for emacs.

#+begin_src emacs-lisp
  (use-package projectile
    :custom
    (projectile-sort-order 'recently-active)
    :config
    (projectile-global-mode)
    :init
      (setq projectile-enable-caching t)
      ;; Custom mode line
      (setq projectile-mode-line '(:eval (format " Ⓟ[%s]" (projectile-project-name))))
    :bind-keymap ("C-c p" . projectile-command-map))
#+end_src

**** Expand region
#+BEGIN_QUOTE
Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.

[[https://github.com/magnars/expand-region.el]]
#+END_QUOTE

- expand selection with =C-==
- contract with negative argument =M--= then =C-==

 #+begin_src emacs-lisp
 (use-package expand-region
   :bind
   ("C-=" . er/expand-region))
 #+end_src

**** Multiple Cursors

 [[https://github.com/magnars/multiple-cursors.el][multiple-cursors.el]] This package can create several cursors to all do the same things.

 #+begin_src emacs-lisp
   (use-package multiple-cursors
     :bind
     (("C-S-c C-S-c" .  mc/edit-lines)
      ("C-$" .  mc/edit-ends-of-lines)
      ("C-S-b" .  mc/edit-beginnings-of-lines)
      ("C-<" .  mc/mark-previous-word-like-this)
      ("C->" .  mc/mark-next-word-like-this)
      ("C-S-n" .  mc/mark-next-like-this)
      ("C-S-p" .  mc/mark-previous-like-this)
      ("C-*" .  mc/mark-all-dwim)))
 #+end_src

**** Treemacs
**** Undo Tree
 This lets you use =C-x u= (=undo-tree-visualize=)
 #+begin_src emacs-lisp
   (use-package undo-tree
     :diminish undo-tree-mode
     :config
     (progn
       (global-undo-tree-mode)
       (setq undo-tree-visualizer-timestamps t)
       (setq undo-tree-visualizer-diff t)))
 #+end_src


**** Yasnippet
** Programming
** Org
** =(provide 'init)=
This concludes the =init.el= file.

#+begin_src emacs-lisp
;; test
  (provide 'init)
    ;;; init.el ends here
#+end_src

# Local Variables:
# eval: (add-hook 'after-save-hook #'org-babel-tangle nil t)
# End:
