;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

;; Author: Nicolas CHAPON
;; Keywords: literate programming, Emacs configuration
;; Homepage:

;;; Commentary:
;; Emacs config.
;; This file was automatically generated by `org-babel-tangle'.
;; Do not change this file.  Main config is located in README.org at `user-emacs-directory'

;;; Code:

(unless (featurep 'early-init)
  (load (expand-file-name "early-init" user-emacs-directory)))

(straight-use-package 'use-package)
(defvar straight-use-package-by-default)
(setq straight-use-package-by-default t)
(require 'use-package)

(use-package diminish)

(setq user-full-name "Nicolas Chapon"
        user-mail-address "nchapon@gmail.com")

(defconst is-mac (equal system-type 'darwin))
(defconst is-linux (equal system-type 'gnu/linux))
(defconst is-windows (equal system-type 'windows-nt))
(defconst has-gui (display-graphic-p))

(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file t))

(setq initial-major-mode 'lisp-interaction-mode
      redisplay-dont-pause t
      column-number-mode t
      echo-keystrokes 0.02
      fill-column 80
      transient-mark-mode t
      shift-select-mode nil
      require-final-newline t
      truncate-partial-width-windows nil
      delete-by-moving-to-trash t
      confirm-nonexistent-file-or-buffer nil
      query-replace-highlight t
      ring-bell-function 'ignore)

(auto-compression-mode t)

(defalias 'yes-or-no-p 'y-or-n-p)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(define-key global-map (kbd "RET") 'newline-and-indent)

(prefer-coding-system 'utf-8-unix)
(set-clipboard-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(set-keyboard-coding-system 'utf-8-unix)
(set-language-environment 'utf-8)
(set-selection-coding-system 'utf-8-unix)
(set-terminal-coding-system 'utf-8-unix)
(setq locale-coding-system 'utf-8-unix)
(setq coding-system-for-write 'utf-8-unix)
(setq default-buffer-file-coding-system 'utf-8-unix)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
(setq file-name-coding-system  'utf-8)

(setq calendar-week-start-day 1
      calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                               "Jeudi" "Vendredi" "Samedi"]
      calendar-month-name-array ["Janvier" "Fevrier" "Mars" "Avril" "Mai"
                                 "Juin" "Juillet" "Aout" "Septembre"
                                 "Octobre" "Novembre" "Decembre"])

(defvar french-holiday
  '((holiday-fixed 1 1 "Jour de l'an")
    (holiday-fixed 5 1 "Fête du travail")
    (holiday-fixed 5 8 "Victoire 45")
    (holiday-fixed 7 14 "Fête nationale")
    (holiday-fixed 8 15 "Assomption")
    (holiday-fixed 11 1 "Toussaint")
    (holiday-fixed 11 11 "Armistice 18")
    (holiday-fixed 12 25 "Noël")
    (holiday-easter-etc 1 "Lundi de Pâques")
    (holiday-easter-etc 39 "Ascension")
    (holiday-easter-etc 50 "Lundi de Pentecôte")))

(setq calendar-date-style 'european
      calendar-holidays french-holiday
      calendar-mark-holidays-flag t
      calendar-mark-diary-entries-flag t)

(when is-mac
  ;; Keys for Appel keyboard
  (setq mac-command-modifier 'meta)    ; make cmd key do Meta
  (setq mac-option-modifier 'super)    ; make opt key do Super
  (setq mac-control-modifier 'control) ; make Control key do Control
  (setq ns-function-modifier 'hyper)   ; make Fn key do Hyper

  ;; Write Symbols [{}]
  (setq-default mac-right-option-modifier nil)

  ;; GPG
  (setf epa-pinentry-mode 'loopback)

  ;; Freench Locale
  (set-locale-environment "fr_FR.UTF-8"))

(use-package no-littering)

;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)

(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)

;; Prefer backward-kill-word over Backspace
(global-set-key (kbd "C-w") #'backward-kill-word)
(global-set-key (kbd "C-x C-k") #'kill-region)

(global-set-key (kbd "C-x C-r") #'recentf-open-files)

;; Move up/down paragraph
(global-set-key (kbd "M-n") #'forward-paragraph)
(global-set-key (kbd "M-p") #'backward-paragraph)

;; Goto Line
;;(global-set-key (kbd "M-g") #'goto-line)

;; Functions
(global-set-key (kbd "<f5>") #'revert-buffer)

(use-package avy
  :defer t
  :bind
  (("C-z c" . avy-goto-char-timer)
   ("C-z l" . avy-goto-line))
  :custom
  (avy-timeout-seconds 0.3)
  (avy-style 'pre)
  :custom-face
  (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))))

(use-package crux
  :bind
  (("C-a" . crux-move-beginning-of-line)
   ("C-c d" . crux-duplicate-current-line-or-region)
   ("C-x 4 t" . crux-transpose-windows)
   ("C-x K" . crux-kill-other-buffers)
   ("C-k" . crux-smart-kill-line)
   ("M-j" . crux-top-join-line))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))

(use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (progn
      (exec-path-from-shell-initialize)
      ;; (exec-path-from-shell-copy-env "GOPATH")
      ;;(exec-path-from-shell-copy-env "JAVA_HOME")
      ;; (exec-path-from-shell-copy-env "PATH")
      ;; (exec-path-from-shell-copy-env "RUST_SRC_PATH")
      )))

(use-package dired
  :straight nil
  :bind
  (("C-x C-j" . dired-jump))
  :custom
  ;; Always delete and copy recursively
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  ;; Auto refresh Dired, but be quiet about it
  (global-auto-revert-non-file-buffers t)
  (auto-revert-verbose nil)
  ;; Quickly copy/move file in Dired
  (dired-dwim-target t)
  ;; Move files to trash when deleting
  (delete-by-moving-to-trash t)
  ;; Load the newest version of a file
  (load-prefer-newer t)
  ;; Detect external file changes and auto refresh file
  (auto-revert-use-notify nil)
  (auto-revert-interval 3) ; Auto revert every 3 sec
  :config
  ;; Enable global auto-revert
  (global-auto-revert-mode t)
  ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Using GNU ls on macOS instead of ls
  (if (executable-find "gls")
      (progn
        (setq insert-directory-program "gls")
        (setq dired-listing-switches "-lFaGh1v --group-directories-first"))
    (setq dired-listing-switches "-ahlF"))

  :hook
  (dired-mode . (lambda ()
                  (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                  (local-set-key (kbd "RET") #'dired-find-alternate-file)
                  (local-set-key (kbd "^")
                                 (lambda () (interactive) (find-alternate-file ".."))))))

(use-package dired-narrow
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))

(use-package diredfl
  :init (diredfl-global-mode 1))

(use-package uniquify
  :straight nil
  :custom
  (uniquify-buffer-name-style 'forward)
  (uniquify-separator "/")
  (uniquify-after-kill-buffer-p t)
  (uniquify-ignore-buffers-re "^\\*")
)

(use-package recentf
  :straight nil
  :custom
  (recentf-auto-cleanup "09:00am")
  (recentf-max-saved-items 300)
  (recentf-exclude '((expand-file-name package-user-dir)
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "COMMIT_EDITMSG\\'")))

;; When buffer is closed, saves the cursor location
(save-place-mode 1)

(recentf-mode 1)

;; Set history-length longer
(setq-default history-length 500)

(use-package which-key
  :diminish
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-mode))

(use-package all-the-icons)

(use-package doom-themes

  :config

  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  (doom-themes-org-config)

  ;; or for treemacs users
  ;;(doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package doom-modeline
  :hook (after-init . doom-modeline-init))

(defun nc/setup-font ()
  "Set up font height"
  (interactive)
  (when is-linux
    (set-frame-font "Input Mono-12" nil t))
  (when is-mac
    (set-frame-font "Monaco 15" nil t))
  (when is-windows
    (set-frame-font "Consolas" nil t))
  )

(when has-gui
  (add-hook 'after-init-hook #'nc/setup-font))

(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

(setq  inhibit-startup-message t)

(if (fboundp 'fringe-mode)
    (fringe-mode 2))

(use-package ace-window
  :bind (([remap other-window] . ace-window))
  :config
  (setq aw-keys '(?q ?s ?d ?f ?g ?h ?j ?k ?l))
  ;; increase size face
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))))

(use-package golden-ratio
  :diminish t
  :init
  (golden-ratio-mode 1)
  :config
  (setq golden-ratio-extra-commands
        (append golden-ratio-extra-commands
                '(ace-window))))

(defun nc/toggle-split-window-horizontally ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

(bind-key "C-z w  -" 'nc/toggle-split-window-horizontally)

(defun nc--split-window-right-and-move-there-dammit ()
  (split-window-right)
  (windmove-right))

(defun nc/toggle-split-window-vertically ()
  (interactive)
  (if (> (count-windows) 1)
      (delete-other-windows)
    (nc--split-window-right-and-move-there-dammit)))

(bind-key "C-z w +" 'nc/toggle-split-window-vertically)

(use-package selectrum
  :init (selectrum-mode +1))
(use-package prescient
  :config (prescient-persist-mode +1))
(use-package selectrum-prescient
  :init (selectrum-prescient-mode +1) :after selectrum)

(use-package marginalia
  :ensure t
  :bind (:map minibuffer-local-map
              ("C-M-a" . marginalia-cycle))
  :init
  (marginalia-mode)
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))

;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x C-r" . consult-recent-file)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s F" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("C-s" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         :map isearch-mode-map
         ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

  ;; Enable automatic preview at point in the *Completions* buffer.
  ;; This is relevant when you use the default completion UI,
  ;; and not necessary for Vertico, Selectrum, etc.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Optionally replace `completing-read-multiple' with an enhanced version.
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-file consult--source-project-file consult--source-bookmark
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; Optionally configure a function which returns the project root directory.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (project-roots)
  (setq consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project)))))
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-root-function #'projectile-project-root)
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-root-function #'vc-root-dir)
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
)


(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map selectrum-minibuffer-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))

(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  ;; Custom some actions
  (define-key embark-defun-map "j" 'crux-top-join-line)
  (define-key embark-symbol-map "j" 'crux-top-join-line)
  (define-key embark-expression-map "j" 'crux-top-join-line)

  (define-key embark-file-map (kbd "S") 'nc/sudo-find-file))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package magit

  :init
  (when (getenv "GIT_EXECUTABLE")
    (setq magit-git-executable (getenv "GIT_EXECUTABLE")))

  :bind (("C-x g" . magit-status)
         ("<f6>" . magit-status )
         ("C-<f6>" . magit-log-buffer-file)))

(use-package ediff
  :straight nil
  :custom
   ;; Ediff should be opened in selected frame and split window horizontally
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-diff-options "-w")
  :config
  ;; Pour éviter des ouvertures de frames intempestives
  (advice-add 'ediff-window-display-p :override 'ignore))

(use-package projectile
  :custom
  (projectile-sort-order 'recently-active)
  :config
  (projectile-global-mode)
  :init
    (setq projectile-enable-caching t)
    ;; Custom mode line
    (setq projectile-mode-line '(:eval (format " Ⓟ[%s]" (projectile-project-name))))
  :bind-keymap ("C-c p" . projectile-command-map))

(use-package expand-region
  :bind
  ("C-=" . er/expand-region))

(use-package multiple-cursors
  :bind
  (("C-S-c C-S-c" .  mc/edit-lines)
   ("C-$" .  mc/edit-ends-of-lines)
   ("C-S-b" .  mc/edit-beginnings-of-lines)
   ("C-<" .  mc/mark-previous-word-like-this)
   ("C->" .  mc/mark-next-word-like-this)
   ("C-S-n" .  mc/mark-next-like-this)
   ("C-S-p" .  mc/mark-previous-like-this)
   ("C-*" .  mc/mark-all-dwim)))

(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))

(use-package smartparens
  :defer t
  :diminish ""
  :hook (((clojure-mode
           emacs-lisp-mode
           common-lisp-mode
           scheme-mode
           lisp-mode
           cider-repl-mode
           inferior-lisp-mode
           inferior-emacs-lisp-mode)
          . smartparens-strict-mode)
         (prog-mode . smartparens-mode))

  :bind (:map smartparens-mode-map
              ("C-M-q" . sp-indent-defun)
              :map smartparens-strict-mode-map
              (";" . sp-comment))

  :config
  (require 'smartparens-config)
  (sp-use-paredit-bindings)
  (define-key smartparens-mode-map (kbd "M-r") 'sp-rewrap-sexp) ; needs to be set manually, because :bind section runs before config
  (setq smartparens-strict-mode t)
  (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p))

  (defun nc--create-newline-and-enter-sexp (&rest _ignored)
    "Open a new brace or bracket expression, with relevant newlines and indent. "
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))

  (sp-with-modes '(c-mode c++-mode js-mode js2-mode java-mode
                          typescript-mode perl-mode)
    (sp-local-pair "{" nil :post-handlers
                   '((nc--create-newline-and-enter-sexp "RET")))))

(use-package paren
  :straight nil
  :hook (prog-mode . show-paren-mode)
  :custom
  (show-paren-delay 0)
  (show-paren-when-point-in-periphery t))

(use-package rainbow-mode
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-mode)
  (diminish 'rainbow-mode))

(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (use-package yasnippet-snippets)
  :hook
  (after-init . yas-global-mode))

(use-package consult-yasnippet
  :bind
  ("C-z y" . consult-yasnippet))

(use-package company
  :diminish ""
  :bind (("M-/" . company-complete)
         ("C-c y" . company-yasnippet)
         :map company-active-map
         ("C-p" . company-select-previous)
         ("C-n" . company-select-next)
         ("TAB" . company-complete-common-or-cycle)
         ("<tab>" . company-complete-common-or-cycle)
         ("C-d" . company-show-doc-buffer))
  :hook (after-init . global-company-mode)

  :custom
  (company-idle-delay 0.1)
  (company-require-match 'never)
  (company-minimum-prefix-length 2)
  (company-tooltip-align-annotations t)
  (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                       company-preview-frontend
                       company-echo-metadata-frontend))
  (company-backends '(company-capf company-files company-dabbrev-code company-semantic))
  (company-tooltip-minimum-width 30)
  (company-tooltip-maximum-width 120)
  )

(use-package company-statistics
  :after company
  :config
  (company-statistics-mode 1))

(use-package vterm
  :commands vterm
  :custom
  (vterm-disable-bold-font t)
  (vterm-disable-inverse-video nil)
  (vterm-disable-underline nil)
  (vterm-kill-buffer-on-exit t)
  (vterm-max-scrollback 9999)
  (vterm-shell "/bin/zsh")
  (vterm-term-environment-variable "xterm-256color"))

(use-package vterm-toggle
  :custom
  ;; Show Vterm Buffer in bottom side
  (vterm-toggle-fullscreen-p nil)
  :init
   (add-to-list 'display-buffer-alist
               '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (side . bottom)
                 (dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3)))
  :bind
  (("C-z t" . vterm-toggle)
   :map vterm-mode-map
   ("C-<return>" . vterm-toggle-insert-cd)
   ("C-S-n" . vterm-toggle-forward)
   ("C-S-p" . vterm-toggle-backward)
   ))

(use-package aweshell
  :straight (aweshell
             :type git
             :host github
             :repo "manateelazycat/aweshell")
  :custom
  (eshell-highlight-prompt nil)
  (eshell-prompt-function 'epe-theme-dakrone)

  :bind
  (("C-z e" . aweshell-dedicated-toggle))
  )

(use-package dockerfile-mode
  :mode "Dockerfile.*\\'")

(use-package lua-mode
  :mode "\\.lua\\'")

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'"       . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config

  (setq markdown-fontify-code-blocks-natively t)

  ;; Process Markdown with Pandoc, using GitHub stylesheet for nice output
  (let ((stylesheet (expand-file-name
                     (locate-user-emacs-file "etc/pandoc.css"))))
    (setq markdown-command
          (mapconcat #'shell-quote-argument
                     `("pandoc" "--toc" "--section-divs"
                       "--css" ,(concat "file://" stylesheet)
                       "--standalone" "-f" "markdown" "-t" "html5")
                     " "))))


(use-package markdown-toc
  :after markdown-mode)

(use-package python-mode
  :straight nil
  :mode ("\\.py\\'")
  :custom
  (python-shell-interpreter "python3"))

(use-package restclient
  :mode (("\\.restclient\\'" . restclient-mode)
         ("\\.http\\'" . restclient-mode)))

(use-package web-mode
  :mode (("\\.html\\'" . web-mode)
         ("\\.hbs\\'" . web-mode)
         ("\\.tag$" . web-mode)
         ("\\.ftl$" . web-mode)
         ("\\.jsp$" . web-mode)
         ("\\.php$" . web-mode))
  :config
  (add-hook 'web-mode-hook (lambda ()
                             (setq web-mode-markup-indent-offset 4)
                             (setq web-mode-code-indent-offset 4))))

(use-package js2-mode
  :mode "\\.js\\'"
  :init
  (defalias 'javascript-generic-mode 'js2-mode)
  :config
  (js2-imenu-extras-setup)
  (setq-default js-auto-indent-flag nil
                js2-strict-missing-semi-warning nil
                js-indent-level 2)

  ;; Don't override global M-j keybinding (join lines)
  (define-key js2-mode-map (kbd "M-j") nil))

(use-package yaml-mode
  :mode (("\\.yaml\\'" . yaml-mode)
           ("\\.yml\\'" . yaml-mode))
  :custom
  (yaml-indent-offset 4))

(use-package org

  :bind (("C-c l" . org-store-link)
         ("C-c c" . org-capture)
         ("C-c a" . org-agenda)
         ("<f12>" . org-agenda)
         ("C-c C-b" . org-iswitchb))

  :config
  ;; New template exapnsion
  (require 'org-tempo)

  (setq org-ellipsis " ⬎"
        org-cycle-separator-lines 0                 ;; Hide empty lines between subtrees
        org-catch-invisible-edits 'show-and-error   ;; Avoid inadvertent text edit in invisible area
        )

  (set-face-attribute 'org-ellipsis nil :underline nil)

  ;; Autamatically add =ID= (unique identifier) in heading drawers to keep links unique
  (require 'org-id)
  (setq org-id-method 'uuidgen)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  (require 'org-crypt)
  (org-crypt-use-before-save-magic)

  (add-to-list 'org-tags-exclude-from-inheritance "crypt")
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.
  (setq org-crypt-key "0DF2D6C6E8443FE7"))

  (use-package org-contrib)

(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :after org
  :custom (org-bullets-bullet-list '("◉" "✿" "★" "•")))

;; Hiding leading bullets in headers
(setq org-hide-leading-stars t)

(let* ((variable-tuple (cond ((x-list-fonts "Input Sans") '(:font "Input Sans"))
                             ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                             ((x-list-fonts "Verdana")         '(:font "Verdana"))
                             ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                             (nil (warn "Cannot find a Sans Serif Font.  Install Open Sans."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight normal :foreground ,base-font-color)))

  (custom-theme-set-faces 'user
                          '(org-special-keyword  ((t (:inherit (font-lock-comment-face fixed-pitch)) :foreground "#69ffeb")))

                          `(org-level-8 ((t (,@headline ,@variable-tuple))))
                          `(org-level-7 ((t (,@headline ,@variable-tuple))))
                          `(org-level-6 ((t (,@headline ,@variable-tuple))))
                          `(org-level-5 ((t (,@headline ,@variable-tuple))))
                          `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
                          `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2 :foreground "#ff8a69"))))
                          `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.3 :foreground "#ffd569"))))
                          `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5 :foreground "#ffaf69"))))
                          `(org-document-title ((t (,@headline ,@variable-tuple :height 1.8 :underline nil :foreground "#e6b68d"))))
                          `(org-document-info         ((t (:foreground "#697dff"))))
                          `(org-document-info-keyword         ((t (:foreground "#697dff"))))
                          `(header-line ((t (:background "#697dff" :height 220))))
                          '(org-special-keyword-face ((t (:foreground "#697dff"))))

                          '(org-block-begin-line ((t (:foreground "#69ffeb"))))
                          '(org-verbatim ((t (:foreground "#69ffeb"))))
                          '(org-table ((t (:foreground "#fae196"))))
                          `(org-checkbox ((t (:foreground "#ff4c4f"
                                         :box (:line-width 1 :style released-button)))))
                          `(org-date ((t (:foreground "#69ffeb"))))
                          `(org-tag ((t (:foreground "#e6b68d"))))

                          `(org-checkbox-statistics-todo ((t (:foreground "#ff4c4f"))))
                          '(org-list-dt               ((t (:foreground "#ff4c4f"))))
                          '(org-link                  ((t (:foreground "#697dff" :underline t))))))

(use-package org-fancy-priorities
      :diminish
      :defines org-fancy-priorities-list
      :hook (org-mode . org-fancy-priorities-mode)
      :config (setq org-fancy-priorities-list '("⚡" "⬆" "⬆" "⬇")))

(setq org-lowest-priority ?D
        org-default-priority ?D
        org-priority-faces '((?A . (:foreground "red" :weight bold))
                             (?B . (:foreground "orange"))
                             (?C . (:foreground "yellow"))
                             (?D . (:foreground "green"))))

(setq org-startup-indented t
      org-pretty-entities t
      ;; show actually italicized text instead of /italicized text/
      org-hide-emphasis-markers t
      org-fontify-quote-and-verse-blocks t)

(use-package org

  :config
  (setq org-directory "~/notes")
  (defconst nc/org-default-projects-dir (concat org-directory "/projects"))
  (defconst nc/org-default-projects-file (concat org-directory "/projects.org"))
  (defconst nc/org-default-resources-dir (concat org-directory "/resources"))
  (defconst nc/org-default-personal-dir (concat org-directory "/personal"))
  (defconst nc/org-default-completed-dir (concat org-directory "/projects/_completed"))
  (defconst nc/org-journal-dir (concat org-directory "/journal"))
  (defconst nc/inbox-file (concat org-directory "/gtd.org"))
  (defconst nc/org-default-inbox-file (concat org-directory "/gtd.org"))
  (defconst nc/org-default-tasks-file (concat org-directory "/gtd.org"))
  (defconst nc/watching-file (concat org-directory "/personal/watching.org"))
  (defconst nc/reading-file (concat org-directory "/personal/books.org"))
  (defconst nc/org-default-media-files (concat org-directory "/personal/watching.org"))
  (defconst nc/org-default-someday-file (concat org-directory "/someday.org"))
  (defconst nc/fishing-file (concat org-directory "/personal/sports/fishing.org"))
  (defconst nc/calendar-file (concat org-directory "/personal/calendar.org"))
  (defconst nc/weekly-review-file (concat org-directory "/personal/reviews/weekly-review.org"))


  (defun nc/go-to-inbox ()
    (interactive)
    (find-file nc/inbox-file )
    (widen)
    (beginning-of-buffer)
    (re-search-forward "* Inbox")
    (beginning-of-line))


  (defun nc/go-to-resources-dir ()
    (interactive)
    (dired nc/org-default-resources-dir))

  )

(defun nc/journal-file-today ()
      "Create and load a journal file based on today's date."
      (interactive)

      (find-file (nc--get-journal-file-today)))

(defun nc--get-journal-file-today ()
      "Return today's journal file."
      (let ((daily-name (format-time-string "%Y-W%W")))
        (expand-file-name (concat nc/org-journal-dir "/" daily-name ".org"))))

(setq org-default-notes-file (nc--get-journal-file-today))

(global-set-key (kbd "C-z f j") 'nc/journal-file-today)

(defun nc--autoinsert-yas-expand ()
      "Replace text in yasnippet template."
      (yas-expand-snippet (buffer-string) (point-min) (point-max)))

    (custom-set-variables
     '(auto-insert 'other)
     '(auto-insert-directory (concat org-directory "/templates")))

    (define-auto-insert "\\.org\\'" ["week.org" nc--autoinsert-yas-expand])

  (defun nc/journal-file-insert ()
    "Insert's the journal heading based on the file's name."
    (interactive)
    (let* ((datim (current-time)))

      (insert (format-time-string (concat "%A %d %B %Y") datim))


      ;; Note: The `insert-file-contents' leaves the cursor at the
      ;; beginning, so the easiest approach is to insert these files
      ;; in reverse order:

      ;; If the journal entry I'm creating matches today's date:

        ;; Insert dailies that only happen once a week:
        (let ((weekday-template (downcase
                                 (format-time-string "templates/journal-%A.org"))))
          (when (file-exists-p weekday-template)
            (insert-file-contents weekday-template)))

        (insert "\n")

        ;; (let ((contents (buffer-string)))
        ;;   (delete-region (point-min) (point-max))
        ;;   (yas-expand-snippet contents (point-min) (point-max)))

        ))

(defun nc/insert-daily-heading ()
  "Insert Daily Heading in journal file"
  (interactive)
  (let ( (header-title (format-time-string "%Y-W%W" )))
    ;; Don't change location of point.
    (goto-char (point-min)) ;; From the beginning...
    (if (search-forward header-title)
        ;;(end-of-line)
        (progn
          (org-insert-heading-after-current)
          (nc/journal-file-insert)
          (org-shiftmetaright))
      (error "Insert failed"))))

;; bind-key
 (bind-key "C-z o i" 'nc/insert-daily-heading)

(setq org-todo-keywords
 '((sequence "TODO(t)" "NEXT(n)" "SOMEDAY(.)" "MAYBE(M)"  "|" "DONE(d)")
   (sequence "STARTED(s)" "WAITING(w@/!)" "|" "CANCELLED(c@/!)" "INACTIVE(i@)")
   (sequence "MEETING(m)" "RDV(r)"  "|" "DONE(d)")))

(setq org-log-done 'time)

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "#c0392b" :weight bold)
              ("NEXT" :foreground "#d35400" :weight bold)
              ("STARTED" :foreground "#f39c12" :weight bold)
              ("SOMEDAY" :foreground "#3498db" :weight bold)
              ("DONE" :foreground "#27ae60" :weight bold)
              ("WAITING" :foreground "#e74c3c" :weight bold)
              ("INACTIVE" :foreground "#bdc3c7" :weight bold)
              ("MEETING" :foreground "#e6b68d" :weight bold)
              ("RDV" :foreground "#e6b68d" :weight bold)
              ("MAYBE" :foreground "#3498db" :weight bold)
              ("CANCELLED" :foreground "#7f8c8d" :weight bold))))

(setq org-tag-alist (quote ((:startgroup)
                            ("@office" . ?o)
                            ("@home" . ?h)
                            (:endgroup)
                            ("@computer" . ?c)
                            ("@reading" . ?r)
                            ("learning" . ?l)
                            ("emacs" . ?e)
                            (:newline)
                            ("WAITING" . ?w)
                            ("HOLD" . ?H)
                            ("CANCELLED" . ?c))))

;;(setq org-fast-tag-selection-single-key nil)

(setq org-tags-exclude-from-inheritance '("project")
      org-stuck-projects '("+project/-DONE"
                           ("TODO" "NEXT") ()))

(setq org-capture-templates
        '(("t" "Task Entry"        entry
              (file+headline nc/inbox-file "Inbox")
              "* TODO %?\n:PROPERTIES:\n:CREATED:%U\n:END:\n\n%i\n\nFrom: %a"
              :empty-lines 1)
          ("s" "Someday" entry (file+headline nc/inbox-file "Inbox")
            "* SOMEDAY %? :idea:\n%u" :clock-in t :clock-resume t)
          ("f" "FishLog" plain (file+datetree+prompt nc/fishing-file)
           "%[~/notes/templates/fishlog.org]")
          ("F" "Film" entry (file+headline nc/watching-file "Films à voir")
               "* NEXT %^{Titre}
       %i
       - *Réalisateur:* %^{Auteur}
       - *Année:* %^{année}
       - *Genre:* %^{genre}

      %?

      %U" :prepend t)


           ("D" "Done Business Task" entry
             (file+headline nc/inbox-file "Tasks")
             "* DONE %^{Task} :@office:"
             :clock-in t :clock-resume t)
          ))

(add-to-list 'org-capture-templates
                 `("m" "Meeting" entry (file+headline nc/calendar-file "Réunions")
           "* MEETING %? :meeting:\n%U\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n"))

(add-to-list 'org-capture-templates
                 `("a" "RendezVous" entry (file+headline nc/calendar-file "RendezVous")
                 "* RDV %? :rdv:\n%U\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n"))

(defun org-journal-find-bookmark ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (nc/journal-file-today)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.

  (goto-char (point-min))
  (search-forward (concat "Links " (format-time-string "%Y-W%W"))))

(add-to-list 'org-capture-templates
               `("l" "Linkk" entry (function org-journal-find-bookmark)
                      "* %?\n  %i\n  From: %a" :empty-lines 1))

(add-to-list 'org-capture-templates
                 '("n" "Note"  entry
                   (file+headline nc/inbox-file "Notes")
                   "* %(org-insert-time-stamp nil nil t) %?\n  %i \n  See: %a" :empty-lines 1))

(add-to-list 'org-capture-templates
                 '("b" "Book"  entry
                   (file+headline nc/reading-file "Inbox")
                   "* NEXT %^{Title}\n:PROPERTIES:\n:author: %^{Author}\n:name: %^{Title}\n:type: %^{Type}\n:END:\n\n%i\n\n" :empty-lines 1))

(add-to-list 'org-capture-templates
             `("i" "Interrupting task" entry
               (function org-journal-find-location)
               "* %^{Task}"
               :clock-in t :clock-resume t))

(defun my/capture-interruption-task ()
    "Interrupted Task"
    (interactive)
    (org-capture 4 "i"))

;; Override the key definition
(global-set-key (kbd "<f9>") 'my/capture-interruption-task)

(add-to-list 'org-capture-templates
                   `("p" "New Project" entry (file nc/org-default-projects-file)
             (file "~/notes/templates/newproject.org")))

(defun org-journal-find-location ()
 ;; Open today's journal, but specify a non-nil prefix argument in order to
 ;; inhibit inserting the heading; org-capture will insert the heading.
 (nc/journal-file-today)
 ;; Position point on the journal's top-level heading so that org-capture
 ;; will add the new entry as a child entry.

 (goto-char (point-min)))

(add-to-list 'org-capture-templates
               `("d" "Review: Daily Review" entry (function org-journal-find-location)
                 (file "~/notes/templates/dailyreview.org")
                 :clock-in t :clock-resume t))

(defun nc/insert-daily-review ()
      (interactive)
        (progn
          (org-capture nil "d")
          (org-capture-finalize t)
          (org-narrow-to-subtree)
          (org-clock-in)))

 (bind-key "C-c o D" 'nc/insert-daily-review)

(add-to-list 'org-capture-templates
                 `("w" "WeeklyReview" entry (file+datetree+prompt nc/weekly-review-file)
           "* Summary of the week :REVIEW:\n%[~/notes/templates/review.org]"))

(setq org-agenda-file-regexp "\\`[^.].*\\.org\\'\\|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$"
        org-agenda-files (list "~/notes/gtd.org" "~/notes/projects.org" "~/notes/someday.org" "~/notes/personal/calendar.org" "~/notes/journal/")
        org-agenda-span 'day
        org-agenda-start-on-weekday nil
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-start-with-log-mode t
        org-agenda-block-separator nil
        org-deadline-warning-days 5)

(setq diary-file "~/notes/diary"
      org-agenda-include-diary t)

(defun nc--org-agenda-skip-project ()
    (org-agenda-skip-entry-if 'regexp ":project:"))

(defun nc--org-agenda-format-parent (n)
  ;; (s-truncate n (org-format-outline-path (org-get-outline-path)))
  (save-excursion
    (save-restriction
      (widen)
      (org-up-heading-safe)
      (s-truncate n (org-get-heading t t)))))

(defun org-current-is-todo ()
  (string= "NEXT" (org-get-todo-state)))

(defun org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo)
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (org-current-is-todo)
          (setq should-skip-entry t))))
    (when should-skip-entry
      (or (outline-next-heading)
          (goto-char (point-max))))))

(require 'org-agenda)

(setq org-agenda-custom-commands
      '(("," "Agenda"
               ((agenda "" ((org-agenda-sorting-strategy '(timestamp-up time-up priority-down category-keep))))

                (tags-todo "TODO=\"STARTED\"+|TODO=\"WAITING\""
                           ((org-agenda-overriding-header "Started / waiting tasks")
                            (org-agenda-prefix-format " %i %-25:c")
                            ;;(org-agenda-prefix-format "%-27:(nc--org-agenda-format-parent 25)")
                            (org-agenda-sorting-strategy '(priority-down todo-state-up category-keep))))
                ;; (tags-todo "TODO=\"NEXT\"+@office-HOLD"
                ;;            ((org-agenda-overriding-header "Next tasks @office")
                ;;             (org-tags-exclude-from-inheritance '("project"))
                ;;             (org-agenda-prefix-format "%-27:(nc--org-agenda-format-parent 25)")
                ;;             ;; (org-agenda-skip-function
                ;;             ;;  (quote
                ;;             ;;   (org-agenda-skip-all-siblings-but-first)))
                ;;             (org-agenda-sorting-strategy '(priority-down todo-state-up category-keep))
                ;;             (org-agenda-todo-keyword-format "%-4s")))
                (tags-todo "TODO=\"NEXT\""
                           ((org-agenda-overriding-header "Next tasks")
                            (org-agenda-prefix-format " %i %-25:c")
                            (org-agenda-skip
                             '(org-agenda-skip-if 'scheduled 'deadline))
                            ;;(org-agenda-files '("~/_PIM/notes/gtd.org"))
                            (org-agenda-sorting-strategy '(priority-down todo-state-up category-keep))))
                )
               nil)
        ("g" . "GTD contexts")
           ("go" "Office" tags-todo "@office")
           ("gc" "Computer" tags-todo "@computer")
           ("ge" "Emacs" tags-todo "emacs")
           ("gl" "Learning" tags-todo "learning")
           ("gr" "Reading" tags-todo "@reading")
            ;; exports block to this file with C-c a e
          ;; ..other commands here
        ("p" "Projects" tags "project")
           ))

(defun nc/org-agenda-recent-open-loops ()
    (interactive)
    (let ((org-agenda-start-with-log-mode t)
            (org-agenda-use-time-grid nil))
      ;; (fetch-calendar)
      (org-agenda-list nil (org-read-date nil nil "-2d") 4)))

(use-package org
  :bind (("C-c C-x C-i" . nc/org-clock-in)
         ("C-c C-x C-o" . org-clock-out)
         ("<f11>" . org-clock-goto))
  :config
  (progn
    ;; Insinuate it everywhere
    (org-clock-persistence-insinuate)
    ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
    (setq org-clock-history-length 23
          ;; Resume clocking task on clock-in if the clock is open
          org-clock-in-resume t
          ;; Separate drawers for clocking and logs
          org-drawers '("PROPERTIES" "CLOCK" "LOGBOOK" "RESULTS" "HIDDEN")
          ;; Save clock data and state changes and notes in the LOGBOOK drawer
          org-clock-into-drawer t
          ;; Sometimes I change tasks I'm clocking quickly -
          ;; this removes clocked tasks with 0:00 duration
          org-clock-out-remove-zero-time-clocks t
          ;; Clock out when moving task to a done state
          org-clock-out-when-done t
          ;; Save the running clock and all clock history when exiting Emacs, load it on startup
          org-clock-persist t
          ;; Prompt to resume an active clock
          org-clock-persist-query-resume t
          ;; Enable auto clock resolution for finding open clocks
          org-clock-auto-clock-resolution #'when-no-clock-is-running
          ;; Include current clocking task in clock reports
          org-clock-report-include-clocking-task t)))

(defun nc--org-clocktable-indent-string (level)
  (if (= level 1)
      ""
    (let ((str "\\"))
      (while (> level 2)
        (setq level (1- level)
              str (concat str "_")))
      (concat str "_ "))))

(advice-add 'org-clocktable-indent-string :override #'nc--org-clocktable-indent-string)

;;(setq org-reverse-note-order t)

(setq org-refile-targets (append '((org-default-notes-file :level . 2))
                                 '((nc/org-default-tasks-file :level . 1)
                                   (nc/org-default-projects-file :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
                                   (nc/org-default-someday-file :level . 0)
                                   (nil :maxlevel . 1)))) ;; current file

(setq org-blank-before-new-entry nil)

(defun nc--verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'nc--verify-refile-target)

(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)

(setq org-refile-allow-creating-parent-nodes 'confirm)

(defun nc/org-show-next-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-next-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

(defun nc/org-show-previous-heading-tidily ()
  "Show previous entry, keeping other entries closed."
  (let ((pos (point)))
    (outline-previous-heading)
    (unless (and (< (point) pos) (bolp) (org-on-heading-p))
      (goto-char pos)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

;; Improve speed command behavior
(setq org-use-speed-commands
       (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))

(push '("N" nc/org-show-next-heading-tidily) org-speed-commands)
(push '("P" nc/org-show-previous-heading-tidily) org-speed-commands)
(push '("m" org-mark-subtree) org-speed-commands)

(defun nc/org-go-speed ()
  "Goes to the beginning of an element's header, so that you can execute speed commands."
  (interactive)
  (when (equal major-mode 'org-mode)
    (if (org-at-heading-p)
        (beginning-of-line)
      (outline-previous-heading))))

(bind-key "C-z /" 'nc/org-go-speed org-mode-map)

;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

(use-package ob-restclient)

(setq org-plantuml-jar-path
      (expand-file-name "~/opt/lib/plantuml.jar"))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (awk .t)
   (python . t)
   (calc . t)
   (js . t)
   (plantuml . t)
   (dot . t)
   (java .t)
   (restclient . t)))

(require 'ob-clojure)

(setq org-src-window-setup 'current-window)

(setq org-confirm-babel-evaluate nil)

(setq org-src-fontify-natively t)

(defun nc--org-time-string-to-seconds (s)
  "Convert a string HH:MM:SS to a number of seconds."
  (cond
   ((and (stringp s)
         (string-match "\\([0-9]+\\):\\([0-9]+\\):\\([0-9]+\\)" s))
    (let ((hour (string-to-number (match-string 1 s)))
          (min (string-to-number (match-string 2 s)))
          (sec (string-to-number (match-string 3 s))))
      (+ (* hour 3600) (* min 60) sec)))
   ((and (stringp s)
         (string-match "\\([0-9]+\\):\\([0-9]+\\)" s))
    (let ((min (string-to-number (match-string 1 s)))
          (sec (string-to-number (match-string 2 s))))
      (+ (* min 60) sec)))
   ((stringp s) (string-to-number s))
   (t s)))

(defun nc--org-time-seconds-to-string (secs)
  "Convert a number of seconds to a time string."
  (cond ((>= secs 3600) (format-seconds "%h:%.2m:%.2s" secs))
        ((>= secs 60) (format-seconds "%m:%.2s" secs))
        (t (format-seconds "%s" secs))))

(defmacro nc/with-time (time-output-p &rest exprs)
  "Evaluate an org-table formula, converting all fields that look
like time data to integer seconds.  If TIME-OUTPUT-P then return
the result as a time value."
  (list
   (if time-output-p 'nc--org-time-seconds-to-string 'identity)
   (cons 'progn
         (mapcar
          (lambda (expr)
            `,(cons (car expr)
                    (mapcar
                     (lambda (el)
                       (if (listp el)
                           (list 'with-time nil el)
                         (nc--org-time-string-to-seconds el)))
                     (cdr expr))))
          `,@exprs))))

(defun nc/create-buffer-attachment-directory ()
    "Create assets directory for org mode file"
  (interactive)
  (let ((assets-buffer-dir (file-name-sans-extension (buffer-name) )))
    (f-mkdir "assets" assets-buffer-dir)
    (message "Creation %s folder for current folder" assets-buffer-dir)))

(defun nc/org-syntax-convert-keyword-case-to-lower ()
  "Convert all #+KEYWORDS to #+keywords."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((count 0)
          (case-fold-search nil))
      (while (re-search-forward "^[ \t]*#\\+[A-Z_]+" nil t)
        (unless (s-matches-p "RESULTS" (match-string 0))
          (replace-match (downcase (match-string 0)) t)
          (setq count (1+ count))))
      (message "Replaced %d occurences" count))))

(use-package deft
    :bind
    (("<f8>" . deft))
    :config
    (setq deft-directory "~/notes"
          deft-recursive t
          deft-extensions '("org")
          deft-default-extension "org"
          deft-text-mode 'org-mode
          deft-org-mode-title-prefix t
          deft-use-filter-string-for-filename t
          deft-auto-save-interval 0
          deft-recursive-ignore-dir-regexp
            (concat "\\(?:"
                    "\\."
                    "\\|\\.\\."
                    "\\\|valtech"
                    "\\|journal"
                    "\\)$")
          deft-file-naming-rules
            '((noslash . "-")
              (nospace . "-")
              (case-fn . downcase))))

(use-package yankpad
  :ensure t
  :init
  (setq yankpad-file (concat org-directory "/templates/yankpad.org"))
  :config
  ;; If you want to complete snippets using company-mode
  ;; (add-to-list 'company-backends 'company-yankpad)
  ;; If you want to expand snippets with hippie-expand
  (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand)

  :bind
  (("<f7>"   . yankpad-insert)
   ("C-<f7>"   . yankpad-map)))

;; (when is-windows  
;;   (add-to-list 'exec-path "C:/ProgramJava/tools/sqlite-tools-win32-x86-3340100"))

(use-package org-roam
  :after org
  :custom
  (org-roam-directory (concat org-directory "/slipbox"))
  :init
  (setq org-roam-v2-ack t)
  :bind
  ("C-c n l" . org-roam-buffer-toggle)
  ("C-c n f" . org-roam-node-find)
  (:map org-mode-map
        (("C-c n i" . org-roam-node-insert)))
  :config
  (setq org-roam-capture-templates '(("d" "default" plain "%?"
                                      :if-new (file+head "%<%Y-%m-%d--%H-%M>--${slug}.org"
                                                         "#+TITLE: ${title}\n#+DATE: %T\n")
                                      :unnarrowed t)))
  ;; this sets up various file handling hooks so your DB remains up to date
  (org-roam-setup))

(defun nc/goto-emacs-config ()
    "Edit Readme.org"
    (interactive)
    (find-file "~/.emacs.d/Readme.org"))

  (global-set-key (kbd "C-z ;") 'nc/goto-emacs-config)

(defun nc/goto-my-credentials ()
    "Goto my credentials"
    (interactive)
    ;; before disable super-save-mode
    ;;(super-save-stop)
    (find-file (concat nc/org-default-personal-dir "/password.gpg")))

(global-set-key (kbd "C-z f p") 'nc/goto-my-credentials)

(defun nc--random-alnum ()
  (let* ((alnum "abcdef0123456789")
         (i (% (abs (random)) (length alnum))))
    (substring alnum i (1+ i))))

(defun nc/uuid ()
  "Generate a pseudo UUID"
  (interactive)
  (dotimes (i 32) (insert (nc--random-alnum))))

(bind-key "C-z i u" 'nc/uuid)

(defun nc--random-char ()
    (let* ((alnum "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-/%+*?&#[]()={}_<>!$,;:^µ0123456789")
           (i (% (abs (random)) (length alnum))))
      (substring alnum i (1+ i))))


(defun nc/generate-password ()
    "Generates a strong password"
    (interactive)
    (dotimes (i 12) (insert (nc--random-char))))

(bind-key "C-z i p" 'nc/generate-password)

(defvar current-hour-format "%H:00")

(defun nc/insert-time-slot ()
  "Insert Time Slot"
  (interactive)
  (let ((begin (format-time-string current-hour-format (current-time)))
        (end (format-time-string current-hour-format (time-add (current-time) (seconds-to-time 3600)))))
    (insert (concat begin "-" end))))

(bind-key "C-z i t" 'nc/insert-time-slot)

(defun nc/insert-datestamp()
  "Insert the current date in yyyy-mm-dd format."
  (interactive "*")
  (if (eq major-mode 'org-mode)
      (progn
        (org-insert-time-stamp nil nil nil)
        (insert " "))
      (insert (format-time-string "%Y-%m-%d" (current-time)))))

(bind-key "C-z i d" 'nc/insert-datestamp)

(defun nc/insert-datestamp-inactive()
  "Insert the current date in yyyy-mm-dd format."
  (interactive "*")
  (if (eq major-mode 'org-mode)
      (progn
    (org-insert-time-stamp nil nil t)
    (insert " "))
    (insert (format-time-string "%Y-%m-%d" (current-time)))))

(bind-key "C-z i D" 'nc/insert-datestamp-inactive)

(defun nc/sudo-find-file (file)
  "Open FILE as root."
  (interactive "FOpen file as root: ")
  (when (file-writable-p file)
    (user-error "File is user writeable, aborting sudo"))
  (find-file (if (file-remote-p file)
                 (concat "/" (file-remote-p file 'method) ":"
                         (file-remote-p file 'user) "@" (file-remote-p file 'host)
                         "|sudo:root@"
                         (file-remote-p file 'host) ":" (file-remote-p file 'localname))
               (concat "/sudo:root@localhost:" file))))

;; test
  (provide 'init)
    ;;; init.el ends here
