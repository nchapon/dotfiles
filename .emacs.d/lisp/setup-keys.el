;;; setup-keys.el --- Key Bindings module -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

;; Author: Nicolas CHAPON
;; Keywords: Emacs configuration
;; Homepage:

;;; Commentary:
;; Emacs config file.
;; This file was automatically generated by `org-babel-tangle'.
;; Do not change this file.  Main config is located in Readme.org at `user-emacs-directory'

;;; Code:

;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "C-l") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "M-o") nil)
(global-set-key (kbd "M-SPC") nil)


(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)

;; Prefer backward-kill-word over Backspace
(global-set-key (kbd "C-w") #'backward-kill-word)
(global-set-key (kbd "C-x C-k") #'kill-region)

(global-set-key (kbd "C-x C-r") #'recentf-open-files)

;; Move up/down paragraph
(global-set-key (kbd "M-n") #'forward-paragraph)
(global-set-key (kbd "M-p") #'backward-paragraph)
(global-set-key (kbd "C-x c") #'compile)


;; Functions
(bind-keys
 ("<f5>" . revert-buffer)
 ("C-<f5>" . magit-log-buffer-file)
 ("<f9>" . treemacs)
 ("<f11>" . nc/maximize-or-split-window-vertically)
 ("C-<f11>" . nc/split-window-horizontally)
 ("<f12>" . org-agenda)
 ("C-<f12>" . org-agenda))

;; Tools alt-[0-9]
(bind-keys
 ("M-0" . nc/maximize-or-split-window-vertically))

(use-package hydra
  :ensure t
  :custom
  (hydra-default-hint nil))

(use-package major-mode-hydra
  :ensure t)

;; Pretty Hydra
(use-package pretty-hydra
  :ensure t)

(pretty-hydra-define nc-hydra-insert (:foreign-keys warn :title "Insert" :quit-key "q" :exit t)
  ("Insert"
   (("d" nc/insert-datestamp-inactive "Date InActive")
    ("D" nc/insert-datestamp "Date Active")
    ("p" nc/generate-password "Password")
    ("u" nc/uuid "UUID"))

   "Snippet"
   (("y" consult-yasnippet "Yasnippet")
    ("Y" yankpad-insert "Yankpad"))))

(pretty-hydra-define nc-hydra-goto (:foreign-keys warn :title "Goto" :quit-key "q" :exit t)
  ("Configuration"
   ((";" nc/goto-emacs-config "Emacs Config"))

    "Personal Files"
    (("i" nc/goto-inbox "Inbox")
     ("p" nc/goto-my-credentials "Passwords"))

   "Personal Dirs"
   (("A" nc/goto-archives-dir "Archives")
    ("N" nc/goto-notes-dir "Notes")
    ("P" nc/goto-projects-dir "Projects")
    ("T" nc/goto-templates-dir "Templates"))))

(pretty-hydra-define nc-hydra-toggle
  (:color amaranth :quit-key "q" :title "Toggles")
  ("Basic"
   (("n" linum-mode "line number" :toggle t)
    ("w" whitespace-mode "whitespace" :toggle t)
    ;;("W" whitespace-cleanup-mode "whitespace cleanup" :toggle t)
    ("r" rainbow-mode "rainbow" :toggle t))
   "Highlight"
   (("l" hl-line-mode "line" :toggle t))
   "Coding"
   (("p" smartparens-mode "smartparens" :toggle t)
    ("P" smartparens-strict-mode "smartparens strict" :toggle t)
    ("S" show-smartparens-mode "show smartparens" :toggle t)
    ("e" eldoc-mode "eldoc" :toggle t))
   "Emacs"
   (("D" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
    ("X" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit)))))

(pretty-hydra-define nc-hydra-windows
    (:color amaranth :quit-key "q" :title "Windows" :exit t)
    ("Move"
     (("v" nc/maximize-or-split-window-vertically "Maximize or Split Window V")
      ("h" nc/split-window-horizontally "Split Window H"))))

(major-mode-hydra-define org-mode nil
  ("GTD"
   (("s" nc/org-insert-daily-review "Start Daily Review")
    ("d" nc/insert-daily-heading "Insert Daily Heading"))
   "Actions"
   (("p" nc/plantuml-preview-current-block "Plantuml Preview Current Block")
    ("r" nc/org-refile-subtree-to-file "Refile subtree to file")
    ("A" nc/create-buffer-attachment-directory "Create attachment directory"))
   "Search"
   (("?" nc/search-notes "Search Notes"))))

(major-mode-hydra-define markdown-mode nil
  ("Actions"
   (("p" nc/plantuml-preview-current-block "Plantuml Preview"))))

(use-package key-chord
  :init
  (key-chord-mode 1)
  (key-chord-define-global "FF" 'projectile-find-file)
  (key-chord-define-global "::" 'avy-goto-char-timer)
  (key-chord-define-global "GG" 'consult-ripgrep)  
  (key-chord-define-global "OO" 'consult-outline)
  (key-chord-define-global "DD" 'delete-region)
  (key-chord-define-global "??" 'nc/search-notes) 
  (key-chord-define-global "BB" 'beginning-of-buffer)
  (key-chord-define-global "JJ" 'crux-top-join-line)
  (key-chord-define-global "MM" 'nc/maximize-or-split-window-vertically)
  (key-chord-define-global "$$" 'end-of-buffer))

(use-package which-key
  :diminish
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-mode)
  (which-key-enable-god-mode-support))

(global-set-key (kbd "C-q") nil)

(defvar-keymap prefix-buffer-map-d
  :doc "Prefix map for C-q for dired/Denote"
  "j" #'dired
  "s" #'denote-sort-dired
  ;; "d" prefix-buffer-map-denote
  )


(defvar-keymap prefix-buffer-map-i
    :doc "Prefix map for C-q for Insert"
    "d" #'nc/insert-datestamp-inactive
    "D" #'nc/insert-datestamp
    "p" #'nc/generate-password
    "t" #'tempel-insert
    "u" #'nc/uuid
    "y" #'consult-yasnippet
    "Y" #'yankpad-insert)

(defvar-keymap prefix-buffer-map-g
  :doc "Prefix map for C-q for goto my files or folders"
  ";" #'nc/goto-emacs-config
  "i" #'nc/goto-inbox
  "p" #'nc/goto-my-credentials
  "A" #'nc/goto-archives-dir
  "N" #'nc/goto-notes-dir
  "P" #'nc/goto-projects-dir
  "T" #'nc/goto-templates-dir
  )

(defvar-keymap prefix-buffer-map-j
  :doc "Prefix map for C-q for jump"
  "j" #'avy-goto-char-timer
  "i" #'imenu
  "o" #'occur
  "d" #'dired-jump)

(defvar-keymap prefix-buffer-map-s
  :doc "Prefix map for C-q for Search"
  "f" #'nc/consult-fd-my-projects
  "n" #'nc/search-notes
  "r" #'nc/consult-rg-my-projects)


(defvar-keymap prefix-buffer-map-t
  :doc "Prefix map for C-q for toggle features."
  "D" #'toggle-debug-on-error
  "P" #'smartparens-strict-mode
  "S" #'show-smartparens-mode
  "X" #'toggle-debug-on-quit
  "e" #'eldoc-mode
  "l" #'hl-line-mode
  "n" #'linum-mode
  "p" #'smartparens-mode
  "r" #'rainbow-mode
  "t" #'treemacs
  "w" #'whitespace-mode)

(defvar-keymap prefix-buffer-map-w
  :doc "Prefix map for C-q for Windows."
  "M-n" #'windmove-display-new-frame)


(defvar-keymap prefix-command-q
  :doc "Prefix Map for C-q:"
  ";" #'nc/goto-emacs-config
  "a" #'embark-act
  "d" prefix-buffer-map-d
  "g" prefix-buffer-map-g
  "C-q" #'major-mode-hydra
  "i" prefix-buffer-map-i
  "j" prefix-buffer-map-j
  "s" prefix-buffer-map-s
  "t" prefix-buffer-map-t
  "w" prefix-buffer-map-w)


(which-key-add-keymap-based-replacements prefix-command-q
  "d" `("Dired/Denote" . ,prefix-buffer-map-d)
  ;; "d d" `("Denote" . ,prefix-buffer-map-denote)
  "g" `("Goto My Files" . ,prefix-buffer-map-g)
  "i" `("Insert" . ,prefix-buffer-map-i)
  "j" `("Jump" . ,prefix-buffer-map-j)
  "t" `("Toggles" . ,prefix-buffer-map-t)
  ;; "m m" `("Mark" . ,prefix-buffer-map-mark)
  ;;"c" `("Casual" . ,prefix-buffer-map-casual)
  "s" `("Search" . ,prefix-buffer-map-s)
  "w" `("Window" . ,prefix-buffer-map-w)
  )

(keymap-set global-map "C-q" prefix-command-q)

(provide 'setup-keys)
;;; setup-keys.el ends here
